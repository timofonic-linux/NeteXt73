#!/bin/bash
## Graficzny instalator kerneli e X t 7 3  - NeteXt'73
## przygotowanie kerneli e X t 7 3 - ext73@wp.pl
## przygotowanie skryptów optymalizacyjnych e X t 7 3
## autor skryptu NeteXt'73 - NetBit73 - netbit73@gmail.com
## Licencja: GPL v3: https://www.gnu.org/licenses/gpl.txt
#########################################################################################################################################################################


LATEST_VERSION=$(grep 'v[0-9]' /opt/NeteXt73/changelog | head -n 1 | cut -d 'v' -f 2)

jezyczek(){

#katalog dla sysbench
if [ ! -e ~/.netext73/sysbench ]; then
	mkdir ~/.netext73/sysbench -p
fi

#katalog dla glmark2
if [ ! -e ~/.netext73/glmark2 ]; then
	mkdir ~/.netext73/glmark2 -p
fi

#katalog dla logów
if [ ! -e ~/.netext73/logi ]; then
	mkdir ~/.netext73/logi -p
fi

#teksty w języku polskim
if [ -e ~/.netext73/jezyk ] && [ "$(cat ~/.netext73/jezyk | grep -e "niemiecki" -e "francuski")" != "" ]; then
	export jezyk="angielski"
	echo 'angielski' >  ~/.netext73/jezyk
fi
if [ -e ~/.netext73/jezyk ]; then
	export jezyk=$(cat ~/.netext73/jezyk)
else
	if [ "$(echo $LANG | grep pl)" != "" ]; then
		export jezyk="polski"
		echo 'polski' >  ~/.netext73/jezyk
	else
		export jezyk="angielski"
		echo 'angielski' >  ~/.netext73/jezyk
	fi
fi
}

#pobranie tłumaczeń
source /opt/NeteXt73/tlumaczenia/angielski
jezyczek; case $jezyk in pol*)
	source /opt/NeteXt73/tlumaczenia/polski
;;
esac

export nazwa_skryptu="NeteXt'73 v$LATEST_VERSION - $TEXT_NETEXT2"
export nazwa_skryptu1="NeteXt'73 v$LATEST_VERSION"
#wersje APM
export wersja_apm1="advanced_power_management_by_ext73_conservative-conservative"
export wersja_apm2="advanced_power_management_by_ext73_ondemand-ondemand"
export wersja_apm3="advanced_power_management_by_ext73_intel-performance"
export wersja_apm4="advanced_power_management_by_ext73_intel-powersave"
export wersja_apm5="advanced_power_management_by_ext73_performance-conservative"
export wersja_apm6="advanced_power_management_by_ext73_performance-ondemand"
#lista kerneli premium i standard
export lista_kerneli_premium="silvermont|sandybridge|ivybridge|haswell|broadwell|skylake|brazos|bulldozer|piledriver|ryzen"
export lista_kerneli_standard="intelstandard|amdstandard"
#nazwy ikon do dymków
export error1="dialog-error"
export ikona_info1="dialog-information"
export warning1="dialog-warning"

export adres_opisu="http://www.netext73.pl/search/label/opis_netext73"

export wersje_ubu="yakkety!xenial!trusty!unstable"
export wspierane_wersje="xenial|yakkety|zesty"
export wspierane_nr="16.04|16.10|17.04"

export lista_dyskow=$(lsblk | grep disk | awk '{print $1}' | sort | uniq)

if lsb_release -d | grep 'Linux Lite 3.2'; then
	#wsparcie dla Lite Linux
	export WERSJA_UBUNTU="yakkety"
	export NR_WERSJA_UBUNTU="16.10"
else
	export WERSJA_UBUNTU="$(lsb_release -cs)"
	export NR_WERSJA_UBUNTU="$(lsb_release -rs)"
fi
#wsparcie mint
case `lsb_release -cs` in
	qiana|rebecca|rafaela|freya|rosa)
		export WERSJA_UBUNTU="trusty"
		export NR_WERSJA_UBUNTU="14.04" ;;
	sarah|serena)
		export WERSJA_UBUNTU="xenial"
		export NR_WERSJA_UBUNTU="16.04" ;;
esac

#adres serwera
export adres_glowny="ftp://37.59.165.105"
export adres_logi="http://37.59.165.105/htdocs/api/create?apikey=dodawanie_wpisow"
export adres_sterownikow="$adres_glowny/sterowniki/"

#sumy sumy kontrolne
export katalog2="2"
export sumy_kontrolne='/tmp/netext73/sumy/sumy_kontrolne.txt'
export adres_sum_kontrolnych="https://raw.githubusercontent.com/NetBit73/sumy/master/sumy_kontrolne.txt"
#sprawdzanie platfromy
if [ "$(cat /proc/cpuinfo | grep -i Intel)" != "" ]; then
	export komputerek="INTEL"
	if [ "$(cat /proc/cpuinfo | grep -i -e 'model name' -e 'intel' | grep -E 'i3|i5|i7' |head -n 1)" != "" ] ;then
		rodzina="$(cat /proc/cpuinfo | grep -i -e 'model name' -e 'intel' | grep -E 'i3|i5|i7' |head -n 1)"
		if [ "$(echo $rodzina | grep -E -o 'i3-2[0-9]{3}|i5-2[0-9]{3}|i7-2[0-9]{3}')" != "" ]; then
			export komputerek_intel="Sandy Bridge"
		elif [ "$(echo $rodzina | grep -E -o 'i3-3[0-9]{3}|i5-3[0-9]{3}|i7-3[0-9]{3}')" != "" ]; then
			export komputerek_intel="Ivy Bridge"
		elif [ "$(echo $rodzina | grep -E -o 'i3-4[0-9]{3}|i5-4[0-9]{3}|i7-4[0-9]{3}')" != "" ]; then
			export komputerek_intel="Haswell"
		elif [ "$(echo $rodzina | grep -E -o 'i3-5[0-9]{3}|i5-5[0-9]{3}|i7-5[0-9]{3}')" != "" ]; then
			export komputerek_intel="BroadWell"
		elif [ "$(echo $rodzina | grep -E -o 'i3-6[0-9]{3}|i5-6[0-9]{3}|i7-6[0-9]{3}')" != "" ]; then
			export komputerek_intel="Skylake"
		elif [ "$(echo $rodzina | grep -E -o 'i3-7[0-9]{3}|i5-7[0-9]{3}|i7-7[0-9]{3}')" != "" ]; then
			export komputerek_intel="Skylake"
		else
			export komputerek_intel="Sandy Bridge"
		fi
	else
		export komputerek_intel="Intel Standard"
	fi
elif [ "$(cat /proc/cpuinfo | grep -i AMD)" != "" ]; then
	export komputerek="AMD"
fi
#bity
if [ "$(uname -m)" = "x86_64" ]; then
	bit="64bit"
	bit2="amd64"
else
	yad --center --info --title="$nazwa_skryptu"  --window-icon="/opt/NeteXt73/ikony/info.png" --image="/opt/NeteXt73/ikony/NeteXt73.png" --button="gtk-ok:0" --title="$nazwa_skryptu"  --text="$TEXT_STEROWNIKI1"
	exit 1
fi

if [ "$(echo $WERSJA_UBUNTU | grep -i trusty)" = "" ]; then
	export apmik="nowy"
	export katalog_apm="/etc/apm-ext73/advanced_power_management_by_ext73_*"
else
	export apmik="stary"
	export katalog_apm="/etc/pm/power.d/advanced_power_management_by_ext73_*"

fi
export wersja_apm=$(ls /opt/NeteXt73/APM/advanced_power_management_by_ext73_* | cut -d '_' -f 6 | tail -n 1 | sed 's/.tar.xz//')

#premium
if [ -e ~/.netext73/kernel_premium ]; then
	if [ "$(grep @.*@ ~/.netext73/kernel_premium)" = "" ]; then
		rm -f ~/.netext73/kernel_premium
		export kernel_premium="brak"
	else
		export US1=$(cat ~/.netext73/kernel_premium | cut -d '@' -f 1)
		export PASS1=$(cat ~/.netext73/kernel_premium | cut -d '@' -f 3)
		export kernel_premium="tak"
	fi
fi

#kolor textu
if [ -e ~/.netext73/kolor_textu ]; then
	export kolor_textu=$(cat ~/.netext73/kolor_textu)
else
	export kolor_textu="blue"
fi
if [ -e /tmp/netext73/userek ]; then
	export userek=$(cat /tmp/netext73/userek)
fi
#adres katalogu download
if [ -e ~/Pobrane ]; then
	export download="/home/$userek/Pobrane"
else
	export download="/home/$userek/Downloads"
fi

if [ ! -e $download ]; then
	download="/home/$userek/"
fi

#HiDPI
if [ -e ~/.netext73/HiDPI ] && [ "$(cat ~/.netext73/HiDPI)" = "TRUE" ]; then
	export skala=2
else
	export skala=1
fi


#########################################################################################################################################################################
#procedury

#pasek postępu pobierania pulsujący gdy coś długo trwa
pobieranie(){
yad --center --on-top --width=$((560*$skala)) --title="  $nazwa_skryptu" --text="$TEXT_POBIERANIE" --progress --pulsate --auto-close --auto-kill --window-icon="/opt/NeteXt73/ikony/download.png" --button="$TEXT_POWROT:1"
}

#pobieranie plików do instalacji kerneli
pobieranie_kerneli(){
if [ "$kern" = "$TEXT_MENU_INSTALATOR5" ];then
	wget $strona/$a #2>&1  | pobieranie
	if [ "$(grep extra $a)" != "" ]; then
		yad_wget $strona/$a/$(grep "href=" ./$a | cut -d '"' -f 8 | grep "all" | grep "linux-headers" | grep -v -E "latency") $strona/$a/$(grep "href=" ./$a | cut -d '"' -f 8 | grep $bit2 | grep "linux-headers"| grep -v -E "latency") $strona/$a/$(grep "href=" ./$a | cut -d '"' -f 8 | grep $bit2 | grep "linux-image-[0-9]"| grep -v -E "latency")  $strona/$a/$(grep "href=" ./$a | cut -d '"' -f 8 | grep $bit2 | grep "linux-image-extra" | grep "linux-image"| grep -v -E "latency")
	else
		yad_wget $strona/$a/$(grep "href=" ./$a | cut -d '"' -f 8 | grep "all" | grep "linux-headers" | grep -v -E "latency") $strona/$a/$(grep "href=" ./$a | cut -d '"' -f 8 | grep $bit2 | grep "linux-headers"| grep -v -E "latency") $strona/$a/$(grep "href=" ./$a | cut -d '"' -f 8 | grep $bit2 | grep "linux-image"| grep -v -E "latency")
	fi
else
	#pobieranie kerneli e X t 7 3
	nazwa_paczki="$(echo $a | cut -d "_" -f 2)$(echo -$rodzaj'_'$bit2.deb)"
	yad_wget $strona/$a/linux-headers-$nazwa_paczki $strona/$a/linux-image-$nazwa_paczki
fi
rm ./index.html -f
}

please_wait(){
if [ "$1" = "kill" ]; then
	echo "zakoncz czekaj.py" > /tmp/netext73/zakoncz.txt
else
	python /opt/NeteXt73/czekaj.py &
fi
}

wersja(){
dymek -i "/opt/NeteXt73/ikony/NeteXt73.png" " " "$nazwa_skryptu" #"$TEXT_INFO1"
}

naglowek(){
echo '#!/bin/bash'
}

instaluj_kernel(){
echo "echo \"$TEXT_PROCEDURA_1\""
echo "echo -e \"\$TEST_INSTALOWAC_KERNEL3 \$rodzaj \$TEST_INSTALOWAC_KERNEL4\n\n\$(ls *.deb)\""
#warunek dla > 16.04
echo "if [ -e /etc/init/mounted-proc.conf ]; then"
echo "sudo sed -i 's+^start on mounted MOUNTPOINT=/proc TYPE=proc+start on mounted MOUNTPOINT=/var+' /etc/init/mounted-proc.conf"
echo "fi"
echo "sudo sed -i 's+^start on starting mountall+start on mounted MOUNTPOINT=/var+' /etc/init/ureadahead.conf"
echo "/usr/bin/yes | sudo dpkg -i linux-headers* linux-image*"
echo "if [ -e ~/.netext73/archiwum_deb ] && [ \"\$(cat ~/.netext73/archiwum_deb)\" = \"TRUE\" ]; then"
echo "sudo cp *.deb /var/cache/apt/archives/ -f"
echo "fi"
echo "if [ \"\$(lspci | grep -i bcm | grep -i wireless)\" != \"\" ]; then"
echo "sudo apt purge broadcom-sta* bcmwl-kernel-source* -y"
echo "if [ \"\$(ls *.deb | grep ext | grep 49)\" != \"\" ];then"
echo "sudo dpkg -i /opt/NeteXt73-pakiety/pakiety/\$(ls /opt/NeteXt73-pakiety/pakiety/ | grep broadcom-sta-dkms)"
echo "fi"
echo "fi"
#wpis iommu
echo "if [ \"\$(grep intel_iommu=igfx_off /etc/default/grub)\" = \"\" ] && [ \"\$komputerek\" = \"INTEL\" ];then"
echo "sudo sed -i '/GRUB_CMDLINE_LINUX=/ s/\"$/ intel_iommu=igfx_off\"/' /etc/default/grub"
echo "sudo update-grub"
echo "fi"
echo "echo 'tak' > /tmp/netext73/ok.txt"
#wyłączenie LPT
echo "sudo sed -i '/^[^#]/s:^:#:' /etc/modules-load.d/cups-filters.conf"
}

#zgoda na wysyłanie raportów
send_raport(){
	ls *.deb > raport.txt
	cat /proc/cpuinfo | grep -E 'model name|flags' | head -n 2 >> raport.txt
	cat raport.txt | netext73-paste raport; rm -f raport.txt
}
zgoda_na_raport(){
if [ -e ~/.netext73/zgoda ] && [ "$(grep TRUE ~/.netext73/zgoda)" != '' ]; then
	send_raport
elif [ -e ~/.netext73/zgoda ] && [ "$(grep FALSE ~/.netext73/zgoda)" != '' ]; then
	echo 1 > /dev/null
else
	if yad --center --question --title="$nazwa_skryptu" --window-icon="/opt/NeteXt73/ikony/pytanie.png" --image="/opt/NeteXt73/ikony/pytanie.png" --button="$TEXT_TAK:0" --button="$TEXT_NIE:1" --height=$((180*$skala)) --width=$((290*$skala)) --text="$TEXT_ZGODA" ; then
		echo 'TRUE' > ~/.netext73/zgoda
		send_raport
	else
		echo 'FALSE' > ~/.netext73/zgoda
	fi
fi
}

stan_firmware(){
if [ "$(dpkg -l linux-firmware | grep "ii" | awk '{print $1}'| head -n1)" != "ii" ]; then
	stan_microcode="-"
else
	if [ "$komputerek" = "INTEL" ]; then
		if [ "$(dpkg -l intel-microcode | grep "ii" | awk '{print $1}'| head -n1)" = "ii" ]; then
			stan_microcode=$TEXT_TAK
		else
			stan_microcode="-"
		fi
	elif [ "$komputerek" = "AMD" ]; then
		if [ "$(dpkg -l amd64-microcode | grep "ii" | awk '{print $1}'| head -n1)" = "ii" ]; then
			stan_microcode=$TEXT_TAK
		else
			stan_microcode="-"
		fi
	fi
fi
}

instalacja_firmware(){
naglowek > instaluj.sh
echo "echo \"$TEXT_PROCEDURA_2\""  >> instaluj.sh
#nonfree
if [ "$(dpkg -l | grep linux-firmware-nonfree | grep ii )" = "" ] && [ "$(echo $WERSJA_UBUNTU | grep -i -x -E "$wspierane_wersje")" = "" ]; then
      yad --center --on-top --question --title="$nazwa_skryptu" --window-icon="/opt/NeteXt73/ikony/pytanie.png" --image="/opt/NeteXt73/ikony/pytanie.png" --button="gtk-ok:0" --button="$TEXT_POWROT:1" --text="$TEXT_PROCEDURA_4"
      if [ $? = 0 ]; then
			echo "sudo apt install linux-firmware-nonfree -y"  >> instaluj.sh
      fi
fi
echo "sudo apt install linux-firmware"  >> instaluj.sh
if [ "$komputerek" = "INTEL" ]; then
	echo "sudo apt install iucode-tool"  >> instaluj.sh
	echo "sudo apt install intel-microcode"  >> instaluj.sh
else
	echo "sudo apt install amd64-microcode"  >> instaluj.sh
fi
instalacja
}

microcode_usun(){
echo "echo \"$TEXT_PROCEDURA_3\""
echo "/usr/bin/yes | sudo dpkg -r linux-firmware-nonfree"
echo "if [ \"\$komputerek\" = \"INTEL\" ]; then sudo apt purge intel-microcode -y; fi"
echo "sudo rm /lib/firmware/* -rf"
}

porownaj_liczby(){
awk 'BEGIN {return_code=('$1' >= '$2') ? 0 : 1; exit} END {exit return_code}'
   return_code=$?
}

apm_inst(){
sudo rm -fr /etc/pm/power.d/* /usr/lib/pm-utils/power.d/readahead
sudo chmod a-x /usr/lib/pm-utils/power.d/*
sudo chmod a-x /etc/apm/event.d/20hdparm
sudo rm -f /etc/systemd/system/hibernate.target.wants/apm_ext73-resume.service
sudo rm -f /etc/systemd/system/hybrid-sleep.target.wants/apm_ext73-resume.service
sudo rm -f /etc/systemd/system/suspend.target.wants/apm_ext73-resume.service
sudo rm -f /etc/systemd/system/hibernate.target.wants/apm_ext73-before.service
sudo rm -f /etc/systemd/system/hybrid-sleep.target.wants/apm_ext73-before.service
sudo rm -f /etc/systemd/system/suspend.target.wants/apm_ext73-before.service
sudo rm -f /etc/udev/rules.d/40-wol-udev-apm-ext73.rules
sudo rm -f /etc/udev/rules.d/50-udev-apm-ext73.rules
sudo rm -f /etc/udev/rules.d/70-brightness-udev-apm-ext73.rules
sudo rm -f /etc/udev/rules.d/80-xfs-udev-apm-ext73.rules
sudo mkdir -p /etc/apm-ext73
sudo rm -f /etc/apm-ext73/*
mkdir /tmp/apm-ext73 -p
rm /tmp/apm-ext73/* -f
tar -Jxf /opt/NeteXt73/APM/advanced_power_management_by_ext73_$wersja_apm.tar.xz -C /tmp/apm-ext73/
if [ "$apmik" = "stary" ]; then
	#przegrywanie plików APM
	sudo cp /tmp/apm-ext73/advanced_power_management* /etc/pm/power.d/
	sudo cp /tmp/apm-ext73/brightness /etc/apm-ext73/
	sudo cp /tmp/apm-ext73/99fancontrol  /etc/pm/sleep.d/
	sudo chmod a+x /usr/lib/pm-utils/power.d/xfs_buffer /usr/lib/pm-utils/power.d/disable_wol /etc/pm/sleep.d/99fancontrol
	sudo chmod a-x /etc/pm/power.d/*
	sudo chmod a+x /etc/apm-ext73/*
	sudo chmod a+x /etc/pm/power.d/advanced_power_management_by_ext73_conservative*
	sudo chown root:root /etc/pm/power.d/*
	sudo chown root:root /etc/apm-ext73/*
	sudo chown root:root /etc/pm/sleep.d/99fancontrol
	#przegrywanie udev dla jasności
	sudo cp /tmp/apm-ext73/60-brightness-udev-apm-ext73.rules /etc/udev/rules.d/
	sudo chown root:root /etc/udev/rules.d/*
	#dodanie apm fixa do rc.local
	sudo sed -i '/apm_status_fix/d' /etc/rc.local
	sudo sed -i '/exit 0/d' /etc/rc.local
	sudo sed -i '/^[ \t]*$/ d' /etc/rc.local
	echo 'bash /opt/NeteXt73/APM/apm_status_fix' | sudo tee -a /etc/rc.local
	echo 'exit 0' | sudo tee -a /etc/rc.local
elif [ "$apmik" = "nowy" ]; then
	sudo cp /tmp/apm-ext73/advanced_power_management* /etc/apm-ext73/
	sudo cp /tmp/apm-ext73/brightness /etc/apm-ext73/
	sudo cp /tmp/apm-ext73/apm_before /etc/apm-ext73/
	sudo cp /tmp/apm-ext73/apm_resume /etc/apm-ext73/
	sudo cp /tmp/apm-ext73/wol /etc/apm-ext73/
	sudo cp /tmp/apm-ext73/xfs_buffer /etc/apm-ext73/
	sudo chmod a+x /etc/apm-ext73/*
	sudo chown root:root /etc/apm-ext73/*
	sudo cp /tmp/apm-ext73/*.rules /etc/udev/rules.d/
	sudo chown root:root /etc/udev/rules.d/*
	#APM systemd
	sudo cp /tmp/apm-ext73/apm_ext73-resume.service /etc/systemd/system/hibernate.target.wants/
	sudo cp /tmp/apm-ext73/apm_ext73-resume.service /etc/systemd/system/hybrid-sleep.target.wants/
	sudo cp /tmp/apm-ext73/apm_ext73-resume.service /etc/systemd/system/suspend.target.wants/
	sudo chown root:root /etc/systemd/system/hibernate.target.wants/*
	sudo chown root:root /etc/systemd/system/hybrid-sleep.target.wants/*
	sudo chown root:root /etc/systemd/system/suspend.target.wants/*
	sudo sed -i 's/\/sbin\/wpa_cli suspend/\/etc\/apm-ext73\/apm_before/g' /lib/systemd/system-sleep/wpasupplicant
	sudo sed -i 's/\/usr\/lib\/pm-utils\/power.d\/95hdparm-apm resume/echo 1 > \/dev\/null/g' /lib/systemd/system-sleep/hdparm

	#udev jeżeli notebook
	if [ "$(ls /sys/class/power_supply/)" != "" ]; then
		sudo cp /tmp/apm-ext73/50-udev-apm-ext73.rules /etc/udev/rules.d/
		sudo chown root:root /etc/udev/rules.d/*
		katalog="/etc/udev/rules.d/50-udev-apm-ext73.rules"
		#dodanie apm fixa do rc.local
		sudo sed -i '/apm_status_fix/d' /etc/rc.local
		sudo sed -i '/exit 0/d' /etc/rc.local
		sudo sed -i '/^[ \t]*$/ d' /etc/rc.local
		echo 'bash /opt/NeteXt73/APM/apm_status_fix' | sudo tee -a /etc/rc.local
		echo 'exit 0' | sudo tee -a /etc/rc.local
	else
	#dodanie apm fixa do rc.local
		katalog="/etc/rc.local"
		sudo sed -i '/apm-ext73/d' /etc/rc.local
		sudo sed -i '/apm_status_fix/d' /etc/rc.local
		sudo sed -i '/exit 0/d' /etc/rc.local
		sudo sed -i '/^[ \t]*$/ d' /etc/rc.local
		echo 'bash /opt/NeteXt73/APM/apm_status_fix' | sudo tee -a /etc/rc.local
		echo 'bash /etc/apm-ext73/wol false' | sudo tee -a /etc/rc.local
		echo "bash /etc/apm-ext73/$(ls /etc/apm-ext73/ | grep advanced_power_management_by_ext73_performance-ondemand) false" | sudo tee -a /etc/rc.local
		if [ -e /proc/sys/fs/xfs/age_buffer_centisecs ]; then
			echo 'bash /etc/apm-ext73/xfs_buffer false' | sudo tee -a /etc/rc.local
		else
			rm -f /etc/udev/rules.d/80-xfs-udev-apm-ext73.rules
		fi
		echo 'exit 0' | sudo tee -a /etc/rc.local
		#usunięcie dla desktop zbędnych regół udev
		rm -f /etc/udev/rules.d/60-brightness-udev-apm-ext73.rules
	fi
fi
sudo chown root:root /usr/lib/pm-utils/power.d/*
if [ "$(which journalctl)" != "" ] && [ "$(journalctl -u cron | grep systemd)" != "" ];then
	sudo systemctl disable ondemand 2> /dev/null
	sudo systemctl stop ondemand 2> /dev/null
	sudo chmod a-x /etc/init.d/ondemand
else
	sudo service ondemand stop
	sudo chmod a-x /etc/init.d/ondemand
fi

#ustawienie jasności wg aktualnej
katalog_jasnosc=$(ls /sys/class/backlight | head -n 1)
if [ "$katalog_jasnosc" != "" ]; then
	wartsc_bright=$(cat /sys/class/backlight/$katalog_jasnosc/brightness)
	sudo sed -i "/#ac/ s/echo.*>/echo $wartsc_bright >/" /etc/apm-ext73/brightness
	sudo sed -i "/#bateria/ s/echo.*>/echo $wartsc_bright >/" /etc/apm-ext73/brightness
	sudo sed -i "s/jasnosc/$katalog_jasnosc/g" /etc/apm-ext73/brightness
fi

#naprawa powerbtn
if [ "$(cat /etc/acpi/powerbtn.sh | grep '/usr/.../qdbus')" != "" ]; then
	sudo cp /etc/acpi/powerbtn.sh /etc/acpi/powerbtn.sh.bak -f
	sudo sed -i 's/\/usr\/...\/qdbus/\/usr\/lib\/x86_64-linux-gnu\/qt4\/bin\/qdbus/' /etc/acpi/powerbtn.sh
	if [ "$(cat /etc/acpi/powerbtn.sh | grep '#\/sbin')" = "" ];then
		sudo sed -i '/Power button pressed/ s/\/sbin/#\/sbin/' /etc/acpi/powerbtn.sh
	fi
fi
rm -Rf /tmp/apm-ext73
#profil apm
if [ -e ~/.netext73/apm_status ]; then
	aktualny="$(cat ~/.netext73/apm_status | head -n 1)"
	if [ "$aktualny" = "intel-performance" ] || [ "$aktualny" = "intel-powersave" ] || [ "$aktualny" = "conservative-conservative" ] || [ "$aktualny" = "ondemand-ondemand" ] || [ "$aktualny" = "performance-conservative" ] || [ "$aktualny" = "performance-ondemand" ];then
		apm_zmiana $aktualny "advanced_power_management_by_ext73_$aktualny*" nowy
	fi
fi
}

apm_zmiana(){
#profil apm
if [ "$apmik" = "stary" ]; then
	sudo chmod a-x /etc/pm/power.d/*
	sudo chmod a+x /etc/pm/power.d/$2
	sudo chown root:root /etc/pm/power.d/*
elif [ "$apmik" = "nowy" ]; then
	katalog1="/etc/udev/rules.d/50-udev-apm-ext73.rules"
	#dodanie apm fixa do rc.local
	katalog2="/etc/rc.local"
	sudo sed -i "s/conservative-conservative_v.* /$1_$wersja_apm /g" $katalog1 $katalog2
	sudo sed -i "s/ondemand-ondemand_v.* /$1_$wersja_apm /g" $katalog1 $katalog2
	sudo sed -i "s/intel-performance_v.* /$1_$wersja_apm /g" $katalog1 $katalog2
	sudo sed -i "s/intel-powersave_v.* /$1_$wersja_apm /g" $katalog1 $katalog2
	sudo sed -i "s/performance-conservative_v.* /$1_$wersja_apm /g" $katalog1 $katalog2
	sudo sed -i "s/performance-ondemand_v.* /$1_$wersja_apm /g" $katalog1 $katalog2
fi
#wifi_batt_fix

if [ "$wifi_batt_fix" = "FALSE" ] || { [ "$3" = "nowy" ] && [ "$(cat ~/.netext73/apm_status | grep wifi_batt_fix | grep FALSE)" != "" ]; } ;then
	sudo sed -i 's/echo auto > \$ii/echo on > \$ii/g' $katalog_apm
elif [ "$wifi_batt_fix" = "TRUE" ] || { [ "$3" = "nowy" ] && [ "$(cat ~/.netext73/apm_status | grep wifi_batt_fix | grep TRUE)" != "" ]; }; then
	sudo sed -i 's/echo on > \$ii/echo auto > \$ii/g' $katalog_apm
fi
#bt_batt_on
if [ "$bt_batt_on" = "FALSE" ] || { [ "$3" = "nowy" ] && [ "$(cat ~/.netext73/apm_status | grep bt_batt_on | grep FALSE)" != "" ]; };then
	sudo sed -i 's/echo 1 > \$bt/echo 0 > \$bt/g' $katalog_apm
elif [ "$bt_batt_on" = "TRUE" ] || { [ "$3" = "nowy" ] && [ "$(cat ~/.netext73/apm_status | grep bt_batt_on | grep TRUE)" != "" ]; };then
	sudo sed -i 's/echo 0 > \$bt/echo 1 > \$bt/g' $katalog_apm
fi
#wifi_n_on
if [ "$wifi_n_on" = "TRUE" ] || { [ "$3" = "nowy" ] && [ "$(cat ~/.netext73/apm_status | grep wifi_n_on | grep TRUE)" != "" ]; };then
	sudo rm -f /etc/modprobe.d/wifi_n_on.conf
elif [ "$wifi_n_on" = "FALSE" ] || { [ "$3" = "nowy" ] && [ "$(cat ~/.netext73/apm_status | grep wifi_n_on | grep FALSE)" != "" ]; };then
	echo 'options iwlwifi 11n_disable=1' | sudo tee /etc/modprobe.d/wifi_n_on.conf
	echo 'options ath9k nohwcrypt=1'  | sudo tee -a /etc/modprobe.d/wifi_n_on.conf
fi
#wifi_batt_on
if [ "$wifi_batt_on" = "FALSE" ] || { [ "$3" = "nowy" ] && [ "$(cat ~/.netext73/apm_status | grep wifi_batt_on | grep FALSE)" != "" ]; };then
	sudo sed -i 's/echo 1 > \$wifi/echo 0 > \$wifi/g' $katalog_apm
elif [ "$wifi_batt_on" = "TRUE" ] || { [ "$3" = "nowy" ] && [ "$(cat ~/.netext73/apm_status | grep wifi_batt_on | grep TRUE)" != "" ]; };then
	sudo sed -i 's/echo 0 > \$wifi/echo 1 > \$wifi/g' $katalog_apm
fi
#rts5139_on
if [ "$rts5139_on" = "TRUE" ] || { [ "$3" = "nowy" ] && [ "$(cat ~/.netext73/apm_status | grep rts5139_on | grep TRUE)" != "" ]; };then
	sudo sed -i '/sudo rmmod rtsx_usb_sdmmc rtsx_usb_ms rtsx_usb/ s/sudo rmmod rtsx_usb_sdmmc rtsx_usb_ms rtsx_usb/sudo modprobe rtsx_usb_sdmmc rtsx_usb_ms rtsx_usb/' $katalog_apm
	sudo sed -i '1,/sudo modprobe rtsx_usb_sdmmc rtsx_usb_ms rtsx_usb/ s/sudo modprobe rtsx_usb_sdmmc rtsx_usb_ms rtsx_usb/sudo rmmod rtsx_usb_sdmmc rtsx_usb_ms rtsx_usb/' $katalog_apm
elif [ "$rts5139_on" = "FALSE" ] || { [ "$3" = "nowy" ] && [ "$(cat ~/.netext73/apm_status | grep rts5139_on | grep FALSE)" != "" ]; };then
	sudo sed -i '/sudo modprobe rtsx_usb_sdmmc rtsx_usb_ms rtsx_usb/ s/sudo modprobe rtsx_usb_sdmmc rtsx_usb_ms rtsx_usb/sudo rmmod rtsx_usb_sdmmc rtsx_usb_ms rtsx_usb/' $katalog_apm
fi
#intel turbo bateria
if [ "$turbo_batt_on" = "FALSE" ] || { [ "$3" = "nowy" ] && [ "$(cat ~/.netext73/apm_status | grep turbo_batt_on | grep FALSE)" != "" ]; };then
	sudo sed -i 's/echo 0 > \$batintel/echo 1 > \$batintel/g' $katalog_apm
elif [ "$turbo_batt_on" = "TRUE" ] || { [ "$3" = "nowy" ] && [ "$(cat ~/.netext73/apm_status | grep turbo_batt_on | grep TRUE)" != "" ]; };then
	sudo sed -i 's/echo 1 > \$batintel/echo 0 > \$batintel/g' $katalog_apm
fi
#intel turbo AC
if [ "$turbo_ac_on" = "FALSE" ] || { [ "$3" = "nowy" ] && [ "$(cat ~/.netext73/apm_status | grep turbo_ac_on | grep FALSE)" != "" ]; };then
	sudo sed -i 's/echo 0 > \$acintel/echo 1 > \$acintel/g' $katalog_apm
elif [ "$turbo_ac_on" = "TRUE" ] || { [ "$3" = "nowy" ] && [ "$(cat ~/.netext73/apm_status | grep turbo_ac_on | grep TRUE)" != "" ]; };then
	sudo sed -i 's/echo 1 > \$acintel/echo 0 > \$acintel/g' $katalog_apm
fi
#HDD
if [ "$hdd_scheduler" = "bfq" ] || { [ "$3" = "nowy" ] && [ "$(cat ~/.netext73/apm_status | grep hdd_scheduler | grep bfq)" != "" ]; };then
	sudo sed -i '/#HDD/ s/cfq/bfq/g' $katalog_apm
	sudo sed -i '/#HDD/ s/deadline/bfq/g' $katalog_apm
elif [ "$hdd_scheduler" = "cfq" ] || { [ "$3" = "nowy" ] && [ "$(cat ~/.netext73/apm_status | grep hdd_scheduler | grep cfq)" != "" ]; };then
	sudo sed -i '/#HDD/ s/bfq/cfq/g' $katalog_apm
	sudo sed -i '/#HDD/ s/deadline/cfq/g' $katalog_apm
elif [ "$hdd_scheduler" = "deadline" ] || { [ "$3" = "nowy" ] && [ "$(cat ~/.netext73/apm_status | grep hdd_scheduler | grep deadline)" != "" ]; };then
	sudo sed -i '/#HDD/ s/bfq/deadline/g' $katalog_apm
	sudo sed -i '/#HDD/ s/cfq/deadline/g' $katalog_apm
fi
#SSD
if [ "$ssd_scheduler" = "deadline" ] || { [ "$3" = "nowy" ] && [ "$(cat ~/.netext73/apm_status | grep ssd_scheduler | grep deadline )" != "" ]; };then
	sudo sed -i '/#SSD/ s/noop/deadline/g' $katalog_apm
elif [ "$ssd_scheduler" = "noop" ] || { [ "$3" = "nowy" ] && [ "$(cat ~/.netext73/apm_status | grep ssd_scheduler | grep noop)" != "" ]; };then
	sudo sed -i '/#SSD/ s/deadline/noop/g' $katalog_apm
fi
#hibernacja
if [ "$hibernacja_menu" = "TRUE" ] || { [ "$3" = "nowy" ] &&  [ "$(cat ~/.netext73/apm_status | grep hibernacja | grep TRUE)" != "" ]; };then
	sudo cp /opt/NeteXt73/APM/com.ubuntu.enable-hibernate.pkla /var/lib/polkit-1/localauthority/50-local.d/com.ubuntu.enable-hibernate.pkla -f
else
	if [ -e /var/lib/polkit-1/localauthority/50-local.d/com.ubuntu.enable-hibernate.pkla ]; then
		sudo rm -f /var/lib/polkit-1/localauthority/50-local.d/com.ubuntu.enable-hibernate.pkla
	fi
fi
if [ "$apmik" = "nowy" ]; then
	sudo udevadm control --reload-rules
	sudo /etc/apm-ext73/./$(cat /etc/udev/rules.d/50-udev-apm-ext73.rules | sed 's/.*\///g' | grep adv | head -n 1 | awk '{print $1}')
fi
#zmiana vsync
if [ "$vsync_on" = "FALSE" ] || { [ "$3" = "nowy" ] && [ "$(cat ~/.netext73/apm_status | grep vsync | grep FALSE)" != "" ]; }; then
	sudo cp /opt/NeteXt73/APM/drirc ~/.drirc -f
	sudo chown $userek:$userek ~/.drirc
elif [ "$vsync_on" = "TRUE" ] || { [ "$3" = "nowy" ] && [ "$(cat ~/.netext73/apm_status | grep vsync | grep TRUE)" != "" ]; }; then
	sudo rm -f ~/.drirc
fi
#samsung_laptop
if [ "$stan_samsung" = "TRUE" ] || { [ "$3" = "nowy" ] && [ "$(cat ~/.netext73/apm_status | grep stan_samsung | grep TRUE)" != "" ]; }; then
	sudo rmmod samsung_laptop
	sudo sed -i 's/.*rmmod samsung_laptop/        \/sbin\/rmmod samsung_laptop/g' $katalog_apm
elif [ "$stan_samsung" = "FALSE" ] || { [ "$3" = "nowy" ] && [ "$(cat ~/.netext73/apm_status | grep stan_samsung | grep FALSE)" != "" ]; }; then
	sudo modprobe samsung_laptop
	sudo sed -i 's/.*rmmod samsung_laptop/        # \/sbin\/rmmod samsung_laptop/g' $katalog_apm
fi

#min_free_kbytes
if [ "$stan_min_free_kbytes" = "TRUE" ] || { [ "$3" = "nowy" ] && [ "$(cat ~/.netext73/apm_status | grep min_free_kbytes | grep TRUE)" != "" ]; }; then
		sudo sed -i 's/.*min_free_kbytes/      echo 128000 > \/proc\/sys\/vm\/min_free_kbytes/g' $katalog_apm
		echo 128000 > /proc/sys/vm/min_free_kbytes
elif [ "$stan_min_free_kbytes" = "FALSE" ] || { [ "$3" = "nowy" ] && [ "$(cat ~/.netext73/apm_status | grep min_free_kbytes | grep FALSE)" != "" ]; }; then
		sudo sed -i 's/.*min_free_kbytes/      #echo 128000 > \/proc\/sys\/vm\/min_free_kbytes/g' $katalog_apm
		echo 67584 > /proc/sys/vm/min_free_kbytes
fi

#jasnosc
#zastosowanie zmiany czeka jasności
sed -i "s/jasnosc.*/jasnosc	$jasnosc_dziala/g" ~/.netext73/apm_status
if [ "$(cat ~/.netext73/apm_status | grep jasnosc | grep TRUE)" != "" ] && [ "$(ls /sys/class/backlight | head -n 1)" != "" ]; then
	if [ "$(cat /sys/class/power_supply/*/online)" = "0" ];then
		sudo /etc/apm-ext73/./brightness true
	else
		sudo /etc/apm-ext73/./brightness false
	fi
	sudo sed -i 's/.*#SUBSYSTEM/SUBSYSTEM/g' /etc/udev/rules.d/60-brightness-udev-apm-ext73.rules
else
	sudo sed -i 's/.*SUBSYSTEM/#SUBSYSTEM/g' /etc/udev/rules.d/60-brightness-udev-apm-ext73.rules
fi
}

stan_apm(){
twoj_apm=$(ls $katalog_apm | cut -d "_" -f 7 | head -n 1)
if [ "$apmik" = "stary" ]; then
	if [ "$(ls /etc/pm/power.d/ | wc -l)" != "6" ] || [ "$twoj_apm" != "$wersja_apm" ]; then
		stan_apm="-"
	else
		if [ -e /etc/pm/power.d/$wersja_apm1*$wersja_apm ]; then
			stan_apm=$(ls /etc/pm/power.d/advanced_power_management_by_ext73* -Fl | grep '*' | cut -d '_' -f 6)
		else
			stan_apm="-"
		fi
	fi

	if [ "$(ls /etc/pm/power.d/ | wc -l)" != "6" ] || [ $( ls /usr/lib/pm-utils/power.d/ -la | grep rwxr | grep -v drwxr-xr-x | wc -l) != "2" ]; then
		stan_apm="-"
	fi
elif [ "$apmik" = "nowy" ]; then

	if [ -e /etc/apm-ext73/ ] && [ "$(ls /etc/apm-ext73/ | wc -l)" != "11" ] || [ "$twoj_apm" != "$wersja_apm" ] ; then
		stan_apm="-"
	else
		if [ "$(ls /sys/class/power_supply/)" != "" ]; then
			katalog="/etc/udev/rules.d/50-udev-apm-ext73.rules"
		else
			#desktop
			katalog="/etc/rc.local"
		fi
		if [ "$(grep advanced_power_management $katalog)" != "" ]; then
			stan_apm=$(cat $katalog | grep advanced_power_management | head -n 1 | sed 's/.*\///' | cut -d '_' -f 6)
		else
			stan_apm="-"
		fi
	fi
fi
if [ "$(grep apm_status_fix /etc/rc.local)" = "" ]  || [ "$twoj_apm" != "$wersja_apm" ]; then
	    stan_apm="-"
fi
}

stan_apm_config(){
#wysłanie danych do configu
if [ "$1" = "czeki" ]; then
	if [ "$apmik" = "stary" ]; then
		ls /etc/pm/power.d/ -Fl | grep '*' | awk '{print $9}' | sed -e 's/*//' -e 's/advanced_power_management_by_ext73_//' -e 's/_v.*//' > ~/.netext73/apm_status
	elif [ "$apmik" = "nowy" ]; then
		cat /etc/udev/rules.d/50-udev-apm-ext73.rules | grep advanced_power_management_by_ext73_ | head -n 1 | cut -d '_' -f 9 > ~/.netext73/apm_status
	fi
	echo "hdd_scheduler 	$hdd_scheduler" >> ~/.netext73/apm_status
	echo "ssd_scheduler 	$ssd_scheduler" >> ~/.netext73/apm_status
	echo "jasnosc 		$jasnosc_dziala" >> ~/.netext73/apm_status
	echo "wifi_batt_fix 	$wifi_batt_fix" >> ~/.netext73/apm_status
	echo "wifi_batt_on 	$wifi_batt_on" >> ~/.netext73/apm_status
	echo "bt_batt_on 	$bt_batt_on">> ~/.netext73/apm_status
	echo "rts5139_on 	$rts5139_on" >> ~/.netext73/apm_status
	echo "wifi_n_on 	$wifi_n_on" >> ~/.netext73/apm_status

	echo "turbo_batt_on 	$turbo_batt_on" >> ~/.netext73/apm_status
	echo "turbo_ac_on 	$turbo_ac_on" >> ~/.netext73/apm_status
	echo "vsync_on 		$vsync_on" >> ~/.netext73/apm_status
	echo "hibernacja 	$hibernacja_menu" >> ~/.netext73/apm_status
	echo "stan_samsung 	$stan_samsung" >> ~/.netext73/apm_status
	echo "stan_min_free_kbytes $stan_min_free_kbytes"  >> ~/.netext73/apm_status
else
	#sprawdzenie stanu APM wifi FIX
	if [ "$(grep 'echo auto > $ii' $katalog_apm)" = "" ];then
		export wifi_batt_fix="FALSE"
	else
		export wifi_batt_fix="TRUE"
	fi
	#włączenie wyłączenie wifi
	if [ "$(grep 'echo 1 > $wifi' $katalog_apm)" = "" ];then
		export wifi_batt_on="FALSE"
	else
		export wifi_batt_on="TRUE"
	fi

	#sprawdzenie stanu bt FIX
	if [ "$(grep 'echo 1 > $bt' $katalog_apm)" = "" ];then
		export bt_batt_on="FALSE"
	else
		export bt_batt_on="TRUE"
	fi

	#sprawdzenie stanu APM rts5139 FIX
	if [ "$(grep 'sudo modprobe rtsx_usb_sdmmc rtsx_usb_ms rtsx_usb' $katalog_apm)" = "" ];then
		export rts5139_on="FALSE"
	else
		export rts5139_on="TRUE"
	fi
	#sprawdzenie wifi N
	if [ -e /etc/modprobe.d/wifi_n_on.conf ] ;then
		export wifi_n_on="FALSE"
	else
		export wifi_n_on="TRUE"
	fi
	#sprawdzenie intel turbo bateria
	if [ "$(grep 'echo 1 > $batintel' $katalog_apm)" != "" ];then
		export turbo_batt_on="FALSE"
	else
		export turbo_batt_on="TRUE"
	fi
	#sprawdzenie intel turbo AC
	if [ "$(grep 'echo 1 > $acintel' $katalog_apm)" != "" ];then
		export turbo_ac_on="FALSE"
	else
		export turbo_ac_on="TRUE"
	fi
	#sprawdzenie BFQ/CFQ/deadline HDD

	if [ "$(grep none /sys/block/sd*/queue/scheduler)" != "" ]; then
		hdd_scheduler_menu="blk-mq"
		ssd_scheduler_menu="blk-mq"
	else
		if [ "$(grep bfq /sys/block/sda/queue/scheduler)" != "" ]; then
			if [ "$(grep 'bfq' $katalog_apm)" != "" ] ;then
				export hdd_scheduler="bfq"; export hdd_scheduler_menu="bfq!cfq!deadline"
			elif [ "$(grep 'cfq' $katalog_apm)" != "" ]; then
				export hdd_scheduler="cfq"; export hdd_scheduler_menu="cfq!bfq!deadline"
			elif [ "$(grep 'deadline' $katalog_apm)" != "" ]; then
				export hdd_scheduler="deadline"; export hdd_scheduler_menu="deadline!bfq!cfq"
			fi
		else
			if [ "$(grep 'bfq' $katalog_apm)" != "" ] ;then
				export hdd_scheduler="bfq"; export hdd_scheduler_menu="cfq!deadline"
			elif [ "$(grep 'cfq' $katalog_apm)" != "" ]; then
				export hdd_scheduler="cfq"; export hdd_scheduler_menu="cfq!deadline"
			elif [ "$(grep 'deadline' $katalog_apm)" != "" ]; then
				export hdd_scheduler="deadline"; export hdd_scheduler_menu="deadline!cfq"
			fi
		fi

		#sprawdzenie noop/deadline SSD
		if [ "$(grep 'noop' $katalog_apm | grep '#SSD' )" != "" ] ;then
			export ssd_scheduler="noop"; export ssd_scheduler_menu="noop!deadline"
		elif [ "$(grep 'deadline' $katalog_apm | grep '#SSD')" != "" ]; then
			export ssd_scheduler="deadline"; export ssd_scheduler_menu="deadline!noop"
		fi
	fi
	#sprawdzanie hibernacji
	if [ -e /var/lib/polkit-1/localauthority/50-local.d/com.ubuntu.enable-hibernate.pkla ]; then
		hibernacja_menu="TRUE"
	else
		hibernacja_menu="FALSE"
	fi
	#sprawdzenie vsync
	if [ -e /home/$(cat /tmp/netext73/userek)/.drirc ]; then
		export vsync_on="FALSE"
	else
		export vsync_on="TRUE"
	fi

	#stan samsung
	if [ "$(cat $katalog_apm | grep -e "#.*samsung_laptop")" != "" ]; then
		export stan_samsung="FALSE"
	else
		export stan_samsung="TRUE"
	fi
	
	#echo 128000 > /proc/sys/vm/min_free_kbytes
	if [ "$(cat $katalog_apm | grep -e "#.*min_free_kbytes")" != "" ]; then
		export stan_min_free_kbytes="FALSE"
	else
		export stan_min_free_kbytes="TRUE"
	fi
	#jasność
	katalog_jasnosc=$(ls /sys/class/backlight | head -n 1)
	if [ "$katalog_jasnosc" != "" ] && [ -e /etc/udev/rules.d/60-brightness-udev-apm-ext73.rules ] && [ "$(grep '#SUBSYSTEM' /etc/udev/rules.d/60-brightness-udev-apm-ext73.rules)" = "" ]; then
		export jasnosc_dziala="TRUE"
	else
		export jasnosc_dziala="FALSE"
	fi

	export jasnosc_dziala_przed=$jasnosc_dziala
	export wifi_n_on_przed=$wifi_n_on
	export wifi_batt_fix_przed=$wifi_batt_fix
	export wifi_batt_on_przed=$wifi_batt_on
	export bt_batt_on_przed=$bt_batt_on
	export rts5139_on_przed=$rts5139_on
	export hdd_scheduler_przed=$hdd_scheduler
	export ssd_scheduler_przed=$ssd_scheduler
	export turbo_batt_on_przed=$turbo_batt_on
	export turbo_ac_on_przed=$turbo_ac_on
	export hibernacja_menu_przed=$hibernacja_menu
	export vsync_on_przed=$vsync_on
	export stan_samsung_przed=$stan_samsung
	export stan_min_free_kbytes_przed=$stan_min_free_kbytes
fi
}

apm_usun(){
echo "echo \"$TEXT_PROCEDURA_9\""
echo "sudo rm -f /etc/systemd/system/hibernate.target.wants/apm_ext73-*"
echo "sudo rm -f /etc/systemd/system/hybrid-sleep.target.wants/apm_ext73-*"
echo "sudo rm -f /etc/systemd/system/suspend.target.wants/apm_ext73-*"
echo "sudo rm -f /etc/udev/rules.d/40-wol-udev-apm-ext73.rules"
echo "sudo rm -f /etc/udev/rules.d/50-udev-apm-ext73.rules"
echo "sudo rm -f /etc/udev/rules.d/60-brightness-udev-apm-ext73.rules"
echo "sudo rm -f /etc/udev/rules.d/80-xfs-udev-apm-ext73.rules"
echo "sudo rm -rf /etc/apm-ext73"
echo "sudo sed -i '/apm_status_fix/d' /etc/rc.local"
echo "sudo rm -fr /etc/pm/power.d/advanced_power_management_by_ext73* /usr/lib/pm-utils/power.d/readahead"
echo "sudo chmod a+x /usr/lib/pm-utils/power.d/*"
echo "sudo chmod a+x /etc/apm/event.d/20hdparm"
echo "sudo chown root:root /usr/lib/pm-utils/power.d/*"
echo "sudo chown root:root /etc/apm/event.d/20hdparm"
echo "sudo sed -i 's/echo 1 > \/dev\/null/\/usr\/lib\/pm-utils\/power.d\/95hdparm-apm resume/g' /lib/systemd/system-sleep/hdparm"
echo "sudo sed -i 's/\/etc\/apm-ext73\/apm_before/\/sbin\/wpa_cli suspend/g' /lib/systemd/system-sleep/wpasupplicant"
#przywrócenie powerbtn
echo "if [ -e /etc/acpi/powerbtn.sh.bak ]; then"
echo "sudo mv /etc/acpi/powerbtn.sh.bak /etc/acpi/powerbtn.sh -f"
echo "sudo chmod a+x /etc/acpi/powerbtn.sh"
echo "sudo chown root:root /etc/acpi/powerbtn.sh"
echo "fi"
echo "if [ \"\$(which journalctl)\" != \"\" ] && [ \"\$(journalctl -u cron | grep systemd)\" != \"\" ];then"
echo "sudo chmod a+x /etc/init.d/ondemand"
echo "sudo systemctl enable ondemand 2> /dev/null"
echo "sudo systemctl start ondemand 2> /dev/null"
echo "else"
echo "sudo chmod a+x /etc/init.d/ondemand"
echo "sudo service ondemand start"
echo "fi"
echo "sudo sed -i '/apm_status_fix/d' /etc/rc.local"
#usunięcie hibernacji
echo "if [ -e /var/lib/polkit-1/localauthority/50-local.d/com.ubuntu.enable-hibernate.pkla ]; then"
echo "sudo rm -f /var/lib/polkit-1/localauthority/50-local.d/com.ubuntu.enable-hibernate.pkla"
echo "fi"
#usunięcie wpisów rc.local
echo "sudo sed -i '/apm-ext73/d' /etc/rc.local"
echo "sudo sed -i '/apm_status_fix/d' /etc/rc.local"
echo "sudo sed -i '/exit 0/d' /etc/rc.local"
}

usun_kernel(){
echo "echo \"$TEXT_KERNEL1\""
echo "$(for i in $(cat kasuj.txt); do dpkg -l | grep $i | awk '{print $2}' >> kasuj2.txt; done)"
echo "echo \"$(cat /tmp/netext73/kasuj2.txt)\""
echo "sudo apt purge $(cat /tmp/netext73/kasuj2.txt  | tr '\n' ' ')"
echo "sudo update-grub"
echo "rm /tmp/netext73/*.txt -f; rm /tmp/netext73/*.sh -f"
}

usun_kernel_expert(){
echo "echo \"$TEXT_KERNEL1\""
echo "echo \"$(cat /tmp/netext73/kasuj.txt | sed 's/TRUE//g' )\""
echo "sudo apt remove $(cat /tmp/netext73/kasuj.txt | sed 's/TRUE//g' | tr '\n' ' ')"
echo "sudo update-grub"
echo "rm /tmp/netext73/*.txt -f; rm /tmp/netext73/*.sh -f"
}

#data i godzina
data_godzina(){
	export godzina=$(date +\"%Y%m%d_%H%m%S\")
}

#instalacja za chwile nastąpi wprowadzenie zmian
instalacja(){
if [ "$(lsof /var/lib/dpkg/lock)" != "" ];then
	proces_zablokowany
else
	data_godzina
	if [ "$1" = "" ]; then
		tekst_instalatora="instalator"
	else
		tekst_instalatora="$1"
	fi
	xterm -T "$tekst_instalatora" -e bash -c "cp -f instaluj.sh /home/$(cat /tmp/netext73/userek)/.netext73/logi/instalujsh_$godzina.log && tput setaf 1;echo \"$TEXT_INSTALACJA1\";tput sgr0; bash instaluj.sh 2>&1 | tee -a /home/$(cat /tmp/netext73/userek)/.netext73/logi/instalacja_$godzina.log && rm instaluj.sh -f ;tput setaf 2; echo -e \"$TEXT_INSTALACJA2\"; sleep 5; echo 'tak' > /tmp/netext73/ok.txt" 
fi
}

#instalacja bez pytań
instalacja2(){
if [ "$(lsof /var/lib/dpkg/lock)" != "" ];then
	proces_zablokowany
else
	data_godzina
	if [ "$1" = "" ]; then
		tekst_instalatora="instalator"
	else
		tekst_instalatora="$1"
	fi
	xterm -T "$tekst_instalatora" -e bash -c "cp -f instaluj.sh /home/$(cat /tmp/netext73/userek)/.netext73/logi/instalujsh_$godzina.log && bash instaluj.sh 2>&1 | tee -a /home/$(cat /tmp/netext73/userek)/.netext73/logi/instalacja_$godzina.log && rm instaluj.sh -f"
fi
}

#instalacja wciśnij enter
instalacja3(){
if [ "$(lsof /var/lib/dpkg/lock)" != "" ];then
	proces_zablokowany
else
	data_godzina
	if [ "$1" = "" ]; then
		tekst_instalatora="instalator"
	else
		tekst_instalatora="$1"
	fi
	xterm -T "$tekst_instalatora" -e bash -c "cp -f instaluj.sh /home/$(cat /tmp/netext73/userek)/.netext73/logi/instalujsh_$godzina.log && sudo bash instaluj.sh 2>&1 | tee -a /home/$(cat /tmp/netext73/userek)/.netext73/logi/instalacja_$godzina.log && rm instaluj.sh -f ;tput setaf 2; echo -e \"$TEXT_INSTALACJA2\"; read ent; echo 'tak' > /tmp/netext73/ok.txt"
fi
}

pobierz_liste_kerneli(){
wget $adres_glowny/dostepne_kernele.tar.gz 2> /dev/null && dymek -i $ikona_info1 " " "$(echo $TEXT_SUMY_KONTROLNE | tr '_' ' ') - $TEXT_POBIERANIE_GOTOWE"
tar -xzf dostepne_kernele.tar.gz -C /tmp/netext73/sumy/
rm -f dostepne_kernele.tar.gz
}

lista_kerneli(){
cd /tmp/netext73
if [ "$1" = "update" ]; then
	if [ ! -e /tmp/netext73/sumy/kernel_premium.txt ] || [ ! -e /tmp/netext73/sumy/kernel_standard.txt ]; then
		pobierz_liste_kerneli
	fi
	#sprawdzanie połączenia z netem
	if [ "$(cat /tmp/netext73/sumy/kernel_standard.txt)" = '' ] || [ "$(cat /tmp/netext73/sumy/kernel_premium.txt)" = '' ]; then
		yad --center --on-top --info --title="$nazwa_skryptu   " --text="<span color=\"$kolor_textu\"><b>$BRAKNETA</b></span>" --window-icon="/opt/NeteXt73/ikony/error.png" --image="/opt/NeteXt73/ikony/error.png" --button="gtk-ok:0" --on-top
		exit 1
	fi
else
	#tu zmienić
	echo $kern > ~/.netext73/instalator_kerneli #zapamiętanie wybranego kernela
	if [ "$premium" = "tak" ]; then
		if [ "$kernel_premium" = "tak" ]; then
			strona="$adres_glowny/kernele_premium$katalog2/"
		fi
		if [ ! -e /tmp/netext73/sumy/kernel_premium.txt ] || [ ! -e /tmp/netext73/sumy/kernel_standard.txt ]; then
			pobierz_liste_kerneli
		fi
	else
		strona="$adres_glowny/kernele/"
		if [ ! -e /tmp/netext73/sumy/kernel_premium.txt ] || [ ! -e /tmp/netext73/sumy/kernel_standard.txt ]; then
			pobierz_liste_kerneli
		fi
	fi
	if [ "$premium" = "tak" ]; then
		lista_kerneli_ftp="/tmp/netext73/sumy/kernel_premium.txt"
	else
		lista_kerneli_ftp="/tmp/netext73/sumy/kernel_standard.txt"
	fi
	dpkg -l |grep linux-image | awk '{print $2}' | grep $rodzaj | sed 's/linux-image-//g'  > 3.txt
	cat $lista_kerneli_ftp | cut -d '_' -f 1 | sed 's/v//g' | awk -F. '{print $1,$2}' | sort -r -nk1 -nk2 | sed 's/ /./'  > lista_kerneli.txt
	touch 4.txt
	for kernelek in $(cat lista_kerneli.txt ); do
		kernel=$(cat $lista_kerneli_ftp | grep $kernelek | tail -n 1 )
		if [ "$(grep $kernel 4.txt)" = "" ];then
			echo "$kernel" >> 4.txt
			if [ -s 3.txt ]; then
				for kernel1 in $(cat 3.txt ); do
					if [ "$(echo $kernel | grep $(echo $kernel1 | sed "s/-$rodzaj.*//g"))" != "" ]; then
						sed 4.txt -i -e "s/$kernel/$kernel tak/g"
					fi
				done
			fi
		fi
	done
	cat 4.txt | awk '{print $2}' > stan.txt
	sed -i 's/^[ \t]*$/-/' stan.txt
	cat 4.txt | awk '{print $1}' > lista.txt 
	paste -d " " lista.txt stan.txt > 3.txt
	echo $(sed -e '/^[^#]/s:^:FALSE :' 3.txt) > 1.txt
	lista=$(sed  's/FALSE/TRUE/' 1.txt ); rm *.txt -f
	a1="-"
	blad=0
	if [ "$(echo $lista)" = "TRUE" ]; then
		yad --center --on-top --info --title="$nazwa_skryptu"  --window-icon="/opt/NeteXt73/ikony/info.png" --image="/opt/NeteXt73/ikony/info.png" --button="gtk-ok:0"  --timeout=15 --text="$TEXT_SERVER_ERROR"
		blad=1
	else
		aa=$(yad --center --on-top --height=$((340*$skala)) --width=$((690*$skala)) --window-icon="/opt/NeteXt73/ikony/linux.png" --title="$nazwa_skryptu" --text="$TEXT_PLATFORMA1: <b><span color=\"$kolor_textu\">$rodzaj</span></b>$TEXT_PLATFORMA2" --column="$TEXT_ZAZNACZ" --column="$TEXT_WYBIERZ_KERNEL" --column="$TEXT_ZNITY1" --button="$TEXT_POWROT:1" --button="gtk-ok:0" --list --radiolist $lista)
		klawisz=$?
		a=$(echo $aa | cut -d "|" -f 2)	 #wybrany kernel
		a1=$(echo $aa | cut -d "|" -f 3) #czy zainstalowany jeżeli '-' można instalować
	fi
fi
}

sprawdz_kernel(){
lista_kerneli update
if [ "$(uname -r | grep ext )" != "" ];then
	twoj_kernel="e X t 7 3 v$(uname -r| cut -d "-" -f 3)"
else
	twoj_kernel=$(uname -r)
fi
if [ "$kernel_premium" = "tak" ]; then
	nowy_kernel=$(cat /tmp/netext73/sumy/kernel_premium.txt | cut -d '_' -f 1 | sed 's/v//g' | awk -F. '{print $1,$2}' |sort -r -nk1 -nk2|sed 's/ /./' | head -n 1 )
else
	nowy_kernel=$(cat /tmp/netext73/sumy/kernel_standard.txt | cut -d '_' -f 1 | sed 's/v//g' | awk -F. '{print $1,$2}' |sort -r -nk1 -nk2|sed 's/ /./' | head -n 1 )
fi
kern1="$(echo $nowy_kernel | sed 's/_testowy.*//g' | sed 's/_stabilny.*//g' | cut -d "-" -f 3)"
kern2="$(echo $nowy_kernel | cut -d "-" -f 1 )"
}

grub(){
echo "echo \"$TEXT_PROCEDURA_13\""
echo "echo \"$TEXT_GRUB1 /etc/default/grub\"; sudo sed -i '/GRUB_CMDLINE_LINUX=/d' $sciezka/grub"
echo "echo \"$TEXT_GRUB2 /etc/default/grub\"; sudo sed \"/GRUB_CMDLINE_LINUX_DEFAULT/a\GRUB_CMDLINE_LINUX=\\\"$wpis_grub\\\"\" $sciezka/grub > /tmp/netext73/grub1"
echo "sudo mv /tmp/netext73/grub1 $sciezka/grub -f"
echo "if [ \"\$grub_pro\" != \"tak\" ]; then"
echo "if [ \"\$(cat /etc/default/grub | grep '#GRUB_HIDDEN_TIMEOUT=')\" = \"\" ]; then"
echo "sudo sed -i 's/GRUB_HIDDEN_TIMEOUT=/#GRUB_HIDDEN_TIMEOUT=/g' /etc/default/grub"
echo "fi"
echo "if [ \"\$w3\" != \"\" ]; then"
echo "sudo sed /etc/default/grub -i -e \"s/GRUB_TIMEOUT=.*/GRUB_TIMEOUT=$w3/\""
echo "fi"
echo "sudo sed -i -e \"s/.*GRUB_GFXMODE=.*/GRUB_GFXMODE=$w4/\" /etc/default/grub"
echo "if [ \"\$w5\" != \"\" ];then"
echo "sudo sed -i -e \"s/.*GRUB_GFXPAYLOAD_LINUX=.*/GRUB_GFXPAYLOAD_LINUX=$w5/\" /etc/default/grub"
echo "fi"
echo "sudo sed -i '/GRUB_BACKGROUND/ d'  /etc/default/grub"
echo "if [ \"\$grub_back\" = \"TRUE\" ]; then"
echo "echo 'GRUB_BACKGROUND=/opt/NeteXt73/ikony/grub_background.png' | sudo tee -a /etc/default/grub"
echo "fi"
echo "fi"
echo "if [ \"\$starter\" != \"default\" ];then"
echo "sudo sed -i -e \"s/GRUB_DEFAULT=.*/GRUB_DEFAULT=\\\"$wpis_nowy\\\"/\" /etc/default/grub"
echo "else"
echo "sudo sed -i -e \"s/GRUB_DEFAULT=.*/GRUB_DEFAULT=0/\" /etc/default/grub"
echo "fi"
echo "sudo chown root:root /etc/default/grub"
#nogpumanager dla > 16.04
echo "if [ \"\$(lsb_release -cr | grep -E \"$wspierane_nr\")\" != \"\" ] || [ \"\$(echo \$WERSJA_UBUNTU | grep -i -x -E \"$wspierane_wersje\")\" != \"\" ]; then"
echo "if [ \"\$(lspci | grep -i VGA | grep -i Intel)\" != \"\" ] && [ \"\$(lspci | grep -i GeForce | grep -i NVIDIA)\" != \"\" ];then"
echo "sudo mv /etc/X11/xorg.conf /etc/X11/xorg.conf_backup -f"
echo "if [ \"\$(grep nogpumanager /etc/default/grub)\" = \"\" ]; then"
echo "sudo sed -i '/GRUB_CMDLINE_LINUX=/ s/\"$/ nogpumanager\"/' /etc/default/grub"
echo "fi"
echo "fi"
echo "fi"
echo "sudo update-grub"
echo "echo 'tak' > /tmp/netext73/ok.txt"

}

instaluj_grub(){
echo "echo \"$TEXT_PROCEDURA_13\"'"
echo "nie" > /tmp/netext73/ok.txt
naglowek > /tmp/netext73/instaluj.sh
grub >> /tmp/netext73/instaluj.sh
instalacja2
if [ "$(cat /tmp/netext73/ok.txt)" = "tak" ]; then
	dymek -i $ikona_info1 "$TEXT_INFORMACJA" "$TEXT_GRUB2 $sciezka/grub. $TEXT_WYMAGANY_RESTART"
else
	dymek -i $warning1 "$TEXT_UWAGA" "$TEXT_GRUB3"
fi
}

wywal_pobrane_pliki_kernela(){
if [ "$(cat /tmp/netext73/ok.txt)" = "tak" ]; then
	#dymek -i $ikona_info1 "$TEXT_INFORMACJA" "$TEXT_KERNEL2"
	#yad --center --on-top --info --title="$nazwa_skryptu"  --window-icon="/opt/NeteXt73/ikony/info.png" --image="/opt/NeteXt73/ikony/info.png" --button="gtk-ok:0"  --timeout=15 --text="$TEXT_KERNEL2"
	rm -rf $PWD
elif  [ "$(cat /tmp/netext73/ok.txt)" = "nie" ]; then
	dymek -i $ikona_info1 "$TEXT_UWAGA" "$TEXT_INFO2<br>/tmp/netext73/$a"
fi
}

nvidia_naglowek(){
echo "echo \"$TEXT_PROCEDURA_15\""
echo "dpkg -l | grep nvidia  | awk '{print \$2}' > nv.txt"
echo "dpkg -l | grep libcuda1| awk '{print \$2}' >> nv.txt"
echo "if grep . nv.txt;then"
}

nvidia(){
echo "sudo dpkg -r \$(cat nv.txt | tr '\\n' ' ')"
echo "fi"
echo "sudo apt install ocl-icd-libopencl1 ocl-icd-libopencl1:i386 lib32gcc1 libvdpau1 libpango-1.0-0 x11-common make sed dkms linux-libc-dev libc6-dev patch acpid libc6-i386 passwd adduser pkg-config screen-resolution-extra libatk1.0-0 libc6 libcairo-gobject2 libcairo2 libfontconfig1 libfreetype6 libgdk-pixbuf2.0-0 libglib2.0-0 libgtk-3-0 libgtk2.0-0 libjansson4  libpangocairo-1.0-0 libpangoft2-1.0-0 libx11-6 libxnvctrl0 libxxf86vm1 -y"
echo "if [ \"\$(dpkg -l | grep bumblebee)\" = \"\" ];then"
echo "sudo apt install nvidia-prime"
echo "fi"
echo "sudo apt -f install pkg-config screen-resolution-extra -y"
echo "/usr/bin/yes | sudo dpkg -i nvidia-$wersja_nvidia.deb"
echo "/usr/bin/yes | sudo dpkg -i libcuda1-$wersja_nvidia.deb"
echo "/usr/bin/yes | sudo dpkg -i nvidia-opencl-icd-$wersja_nvidia.deb"
echo "/usr/bin/yes | sudo dpkg -i \$(ls | grep nvidia-settings)"
echo "if [ -e libxnvctrl* ]; then"
echo "/usr/bin/yes | sudo dpkg -i \$(ls | grep libxnvctrl)"
echo "fi"
echo "/usr/bin/yes | sudo dpkg -i --force-all nvidia-libopencl1-$wersja_nvidia.deb"
}
 
nvidia_optimus(){
echo "sudo dpkg -P \$(cat nv.txt | tr '\\n' ' ')"
echo "fi"
echo "sudo apt install ocl-icd-libopencl1 ocl-icd-libopencl1:i386 lib32gcc1 bumblebee primus primus-libs primus-libs:i386 primus-libs-ia32:i386 x11-common make sed dkms linux-libc-dev libc6-dev patch acpid libc6-i386 passwd adduser pkg-config screen-resolution-extra libvdpau1 libatk1.0-0 libc6 libcairo-gobject2 libcairo2 libfontconfig1 libfreetype6 libgdk-pixbuf2.0-0 libglib2.0-0 libgtk-3-0 libgtk2.0-0 libjansson4 libpango-1.0-0 -y"
echo "sudo cp /tmp/nvidia-optimus/usr/lib/x86_64-linux-gnu/primus/libGL.so.1 /usr/lib/x86_64-linux-gnu/primus/libGL.so.1 -f"
echo "sudo cp /tmp/nvidia-optimus/usr/lib/i386-linux-gnu/primus/libGL.so.1 /usr/lib/i386-linux-gnu/primus/libGL.so.1 -f"
echo "/usr/bin/yes | sudo dpkg -i nvidia-$wersja_nvidia.deb"
echo "/usr/bin/yes | sudo dpkg -i libcuda1-$wersja_nvidia.deb"
echo "/usr/bin/yes | sudo dpkg -i nvidia-opencl-icd-$wersja_nvidia.deb"
echo "/usr/bin/yes | sudo dpkg -i \$(ls | grep nvidia-settings)"
echo "if [ -e libxnvctrl* ]; then"
echo "/usr/bin/yes | sudo dpkg -i \$(ls | grep libxnvctrl)"
echo "fi"
echo "/usr/bin/yes | sudo dpkg -i --force-all nvidia-libopencl1-$wersja_nvidia.deb"
echo "sudo cp /tmp/nvidia-optimus/etc/bumblebee/bumblebee.conf /etc/bumblebee/ -f"
echo "sudo cp /tmp/nvidia-optimus/etc/bumblebee/xorg.conf.nvidia /etc/bumblebee/ -f"
echo "if [ \"\$(lsb_release -cr | grep -E \"$wspierane_nr\")\" = \"\" ] || [ \"\$(echo \$WERSJA_UBUNTU | grep -i -x -E \"$wspierane_wersje\")\" = \"\" ]; then"
echo "sudo cp /tmp/nvidia-optimus/etc/modprobe.d/bumblebee.conf /etc/modprobe.d/bumblebee.conf -f"
echo "fi"
echo "sudo rm -fr /usr/sbin/bumblebeed"
echo "sudo cp -f /tmp/nvidia-optimus/usr/bin/bumblebeed /usr/bin/"
echo "sudo cp -f /tmp/nvidia-optimus/usr/bin/optirun /usr/bin/optirun"
echo "sudo cp -f /tmp/nvidia-optimus/usr/sbin/bumblebeed /usr/sbin/bumblebeed"
echo "sudo cp -f /tmp/nvidia-optimus/etc/modprobe.d/* /etc/modprobe.d/"
echo "sudo chmod a+x /usr/sbin/bumblebeed /usr/bin/optirun /usr/bin/bumblebeed"
echo "sudo chown root:root /usr/sbin/bumblebeed /usr/bin/bumblebeed /usr/bin/optirun"
echo "export wersja_sterownika=\"\$(ls /tmp/netext73 | grep tar.xz | cut -d '_' -f 1 | cut -d '-' -f 2 | head -n 1)\""
echo "if [ \"\$(grep 'nvidia-updates-' /etc/bumblebee/bumblebee.conf)\" = \"\" ];then"
echo "sudo sed -i \"s/nvidia-.../nvidia-\$wersja_sterownika/g\" /etc/bumblebee/bumblebee.conf"
echo "else"
echo "sudo sed -i \"s/nvidia-updates-.../nvidia-\$wersja_sterownika/g\" /etc/bumblebee/bumblebee.conf"
echo "fi"
echo "sudo sed -i \"/BusID/ s/PCI:..:..:./PCI:$(lspci | egrep 'VGA|3D' | grep -i 'nvidia' | awk '{print $1}')/g\" /etc/bumblebee/xorg.conf.nvidia"
echo "sudo sed -i '/BusID/ s/\./:/g' /etc/bumblebee/xorg.conf.nvidia"
echo "sudo rm -rf /tmp/nvidia-optimus/"
#linkowanie dla > 16.04
echo "if [ \"\$(lsb_release -cr | grep -E \"$wspierane_nr\")\" != \"\" ] || [ \"\$(echo \$WERSJA_UBUNTU | grep -i -x -E \"$wspierane_wersje\")\" != \"\" ]; then"
echo "sudo rm -f /etc/modprobe.d/nvidia-graphics-drivers.conf"
echo "sudo rm -f /etc/ld.so.conf.d/i386-linux-gnu_GL.conf"
echo "sudo rm -f /etc/alternatives/i386-linux-gnu_xorg_extra_modules"
echo "sudo rm -f /etc/alternatives/x86_64-linux-gnu_nvidia_modconf"
echo "sudo rm -f /etc/alternatives/x86_64-linux-gnu_xorg_extra_modules"
echo "sudo rm -f /etc/ld.so.conf.d/x86_64-linux-gnu_GL.conf"
echo "sudo ln -sf /usr/lib/i386-linux-gnu/mesa/ld.so.conf /etc/alternatives/i386-linux-gnu_gl_conf"
echo "sudo ln -sf /usr/lib/i386-linux-gnu/mesa/ld.so.conf /etc/ld.so.conf.d/i386-linux-gnu_GL.conf"
echo "sudo ln -sf /usr/lib/i386-linux-gnu/xorg/x11-extra-modules/ /etc/alternatives/i386-linux-gnu_xorg_extra_modules"
echo "sudo ln -sf /usr/lib/x86_64-linux-gnu/mesa/ld.so.conf /etc/alternatives/x86_64-linux-gnu_gl_conf"
echo "sudo ln -sf /usr/lib/x86_64-linux-gnu/mesa/ld.so.conf /etc/ld.so.conf.d/x86_64-linux-gnu_GL.conf"
echo "sudo ln -sf /usr/lib/x86_64-linux-gnu/mesa-egl/ld.so.conf /etc/ld.so.conf.d/x86_64-linux-gnu_EGL.conf"
echo "sudo ln -sf /usr/lib/x86_64-linux-gnu/xorg/x11-extra-modules/ /etc/alternatives/x86_64-linux-gnu_xorg_extra_modules"
echo "sudo ldconfig"
echo "fi"
echo "if dpkg -l | grep linux | grep ext73; then"
echo "if ! grep 'pcie_port_pm=off' /etc/default/grub; then"
echo "sudo sed -i '/GRUB_CMDLINE_LINUX=/ s/\"$/ pcie_port_pm=off\"/' /etc/default/grub"
echo "fi"
echo "else"
echo "if grep 'pcie_port_pm=off' /etc/default/grub; then"
echo "sudo sed -i 's/ pcie_port_pm=off//g' /etc/default/grub"
echo "fi"
echo "fi"
}

nvidia_stopka(){
echo "if [ -e ~/.netext73/archiwum_deb ] && [ \"\$(cat ~/.netext73/archiwum_deb)\" = \"TRUE\" ]; then"
echo "sudo cp *.deb /var/cache/apt/archives/ -f"
echo "fi"
echo "cd /tmp/netext73"
echo "rm -f *.tar.xz"
echo "rm -rf nvidia-*"
echo "if [ \"\$(grep '#GRUB_GFXMODE' /etc/default/grub)\" != \"\" ]; then"
echo "sudo sed -i 's/#GRUB_GFXMODE.*/GRUB_GFXMODE=1024x768/' /etc/default/grub"
echo "fi"
echo "if [ \"\$(grep 'GRUB_GFXPAYLOAD_LINUX' /etc/default/grub)\" = \"\" ]; then"
echo "sudo sed -i \"s/GRUB_GFXMODE.*/GRUB_GFXMODE=1280x1024\nGRUB_GFXPAYLOAD_LINUX=1024x768/\" /etc/default/grub"
echo "fi"
#echo "sudo update-initramfs -u -k all"
echo "sudo update-initramfs -u -k  $(uname -a | awk '{print $3}')"
echo "if [ -e /usr/share/applications/nvidia-settings.desktop ] && [ \"\$(lspci | grep -i VGA | grep -i Intel)\" != \"\" ] && [ \"\$(lspci | grep -i GeForce | grep -i NVIDIA)\" != \"\" ];then"
echo "sudo sed -i 's/Exec=.*/Exec=optirun -b none nvidia-settings -c :8/g' /usr/share/applications/nvidia-settings.desktop"
echo "fi"
echo "if [ -e /etc/X11/xorg.conf.\$(date +\"%m%d%Y\") ]; then"
echo "sudo mv /etc/X11/xorg.conf.\$(date +\"%m%d%Y\") /etc/X11/xorg.conf"
echo "fi"
#usunięcie xorg > 16.04
echo "if [ \"\$(lsb_release -cr | grep -E \"$wspierane_nr\")\" != \"\" ] || [ \"\$(echo \$WERSJA_UBUNTU | grep -i -x -E \"$wspierane_wersje\")\" != \"\" ]; then"
echo "if [ \"\$(lspci | grep -i VGA | grep -i Intel)\" != \"\" ] && [ \"\$(lspci | grep -i GeForce | grep -i NVIDIA)\" != \"\" ];then"
echo "if [ -e /etc/X11/xorg.conf ]; then"
echo "sudo mv /etc/X11/xorg.conf /etc/X11/xorg.conf_backup -f"
echo "fi"
echo "echo \"manual\" | sudo tee /etc/init/gpu-manager.override"
#nogpumanager
echo "if [ \"\$(grep nogpumanager /etc/default/grub)\" = \"\" ]; then"
echo "sudo sed -i '/GRUB_CMDLINE_LINUX=/ s/\"$/ nogpumanager\"/' /etc/default/grub"
echo "fi"
echo "fi"
echo "fi"
echo "sudo update-grub"
}

restart(){
if [ "$1" = "kernel" ]; then
	yad --center --on-top --question --title="$nazwa_skryptu" --window-icon="/opt/NeteXt73/ikony/pytanie.png" --image="/opt/NeteXt73/ikony/pytanie.png" --button="$TEXT_TAK:0" --button="$TEXT_NIE:1" --text="$TEXT_KERNEL2\n\n$TEXT_RESTART"	
else
	yad --center --on-top --question --title="$nazwa_skryptu" --window-icon="/opt/NeteXt73/ikony/pytanie.png" --image="/opt/NeteXt73/ikony/pytanie.png" --button="$TEXT_TAK:0" --button="$TEXT_NIE:1" --text="$TEXT_RESTART"
fi
	if [ $? = 0 ]; then
		reboot
	fi
}

sprawdz_klucze(){
#xterm -T GPG-KEY -e bash -c "echo 'sudo apt-key list';
sudo apt-key list > klucze1.txt
}
usun_klucze(){
xterm -T GPG-KEY -e bash -c "echo 'Podaj hasło aby usunąć zaznaczone klucze'; for i in \$(cat usun.txt); do sudo apt-key del \$i; done ; echo 'sudo apt-key list' ; sudo apt-key list > klucze1.txt"
}

klucze(){
echo "sudo apt update 2> /tmp/netext73/updateresults"
echo "MISSINGKEYS=\$(cat /tmp/netext73/updateresults)"
echo "if [[ \$MISSINGKEYS ]]; then"
echo "echo 'Trying to import all the missing keys'"
echo "IFS=\$'\\n'"
echo "n=1"
echo "while read curline; do"
echo "	GPGKEYTOGET=\$(echo \$curline | sed -e 's/.*://g')"
echo "	apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys \$GPGKEYTOGET"
echo "	let n=n+1"
echo "done < /tmp/netext73/updateresults"
echo "fi"
echo "rm -f /tmp/netext73/updateresults"
echo "sudo apt update"
}

napraw_klucze(){
echo "echo -e \"$a4\\n\"; sudo apt clean; sudo mv /var/lib/apt/lists /tmp/netext73; sudo mkdir /var/lib/apt/lists; sudo apt update; sudo rm -rf /tmp/netext73/lists"
}

stan_baterii(){
info_o_baterii=$(cat /sys/class/power_supply/BAT*/uevent )
Stan_baterii="Battery status"; licznik=1

for a in "POWER_SUPPLY_NAME" "POWER_SUPPLY_STATUS" "POWER_SUPPLY_TECHNOLOGY" "POWER_SUPPLY_MODEL_NAME" "POWER_SUPPLY_MANUFACTURER" "POWER_SUPPLY_SERIAL_NUMBER" "POWER_SUPPLY_VOLTAGE_MIN_DESIGN" "POWER_SUPPLY_VOLTAGE_NOW" "POWER_SUPPLY_CAPACITY"; do
	if [ "$(grep pol ~/.netext73/jezyk)" = "" ]; then
		bar[$licznik]="$(echo $info_o_baterii | tr ' ' '\n' | grep $a | cut -d '=' -f 1)"
		bar[10]="POWER_SUPPLY_FULL_CAPACITY"
	fi
	stan[$licznik]="$(echo $info_o_baterii | tr ' ' '\n' | grep $a | cut -d '=' -f 2)"
	((licznik++))
done

#pojemność
if [ "$(echo $info_o_baterii | grep POWER_SUPPLY_CHARGE_FULL_DESIGN)" != "" ]; then
	bateria_full="$(echo "scale=0; $(echo $info_o_baterii | tr ' ' '\n' | grep POWER_SUPPLY_CHARGE_FULL= | cut -d '=' -f 2)/1000" | bc -q)"
	bateria_teraz="$(echo "scale=0; $(echo $info_o_baterii | tr ' ' '\n' | grep POWER_SUPPLY_CHARGE_NOW= | cut -d '=' -f 2)/1000" | bc -q)"
	jednostka="mAh"
else
	bateria_full="$(echo "scale=0; $(echo $info_o_baterii | tr ' ' '\n' | grep POWER_SUPPLY_ENERGY_FULL= | cut -d '=' -f 2)/1000000" | bc -q)"
	bateria_teraz="$(echo "scale=0; $(echo $info_o_baterii | tr ' ' '\n' | grep POWER_SUPPLY_ENERGY_NOW= | cut -d '=' -f 2)/1000000" | bc -q)"
	jednostka="Wh"
fi
#zmiana języka
#jezyczek
if [ "$(grep pol ~/.netext73/jezyk)" != "" ]; then
	Stan_baterii="Stan baterii"
	bar[1]="Nazwa baterii"
	bar[2]="Tryb pracy baterii"
	bar[3]="Rodzaj baterii"
	bar[4]="Model baterii"
	bar[5]="Producent baterii"
	bar[6]="Nr seryjny baterii"
	bar[7]="Konstrukcyjne napięcie baterii"
	bar[8]="Aktualne napięcie baterii"
	bar[9]="Aktualna pojemność baterii"
	bar[10]="Maksymalny poziom naładowania baterii"
	if [ "$(echo ${stan[2]})" = "Discharging" ];then
		stan[2]="Rozładowywanie"
	elif [ "$(echo ${stan[2]})" = "Charging" ];then
		stan[2]="Ładowywanie"
	elif [ "$(echo ${stan[2]})" = "Full" ];then
		stan[2]="Pełna"
	else
		stan[2]="Nieznany"
	fi
	if [ "$(echo ${stan[3]})" = "Unknown" ];then
		stan[3]="Nieznany"
	fi
fi
#przeliczanie napięcia na V
stan[7]=$(echo "scale=2; ${stan[7]}/1000000" | bc -q)
stan[8]=$(echo "scale=2; ${stan[8]}/1000000" | bc -q)

if [ "$(echo $info_o_baterii | grep POWER_SUPPLY_ENERGY_FULL_DESIGN)" != "" ]; then
	poj_produkcyjna=$(echo "scale=0; $(echo $info_o_baterii | tr ' ' '\n' | grep POWER_SUPPLY_ENERGY_FULL_DESIGN= | cut -d '=' -f 2)/10000" | bc -q)
	poj_teraz=$(echo "scale=0; $(echo $info_o_baterii | tr ' ' '\n' | grep POWER_SUPPLY_ENERGY_FULL= | cut -d '=' -f 2)/10000" | bc -q)
	if [ "$poj_produkcyjna" != "0" ] || [ "$poj_produkcyjna" != "" ]; then
		stan[10]=$(echo "scale=0; 100*$poj_teraz/$poj_produkcyjna" | bc -q)
		stan[9]=$(echo "scale=0; 100*$bateria_teraz/$bateria_full" | bc -q)
	else
		stan[10]=0
		stan[9]=0
	fi
else
	poj_produkcyjna=$(echo "scale=0; $(echo $info_o_baterii | tr ' ' '\n' | grep POWER_SUPPLY_CHARGE_FULL_DESIGN= | cut -d '=' -f 2)/10000" | bc -q)
	poj_teraz=$(echo "scale=0; $(echo $info_o_baterii | tr ' ' '\n' | grep POWER_SUPPLY_CHARGE_FULL= | cut -d '=' -f 2)/10000" | bc -q)
	if [ "$poj_produkcyjna" != "0" ] || [ "$poj_produkcyjna" != "" ]; then
		stan[10]=$(echo "scale=0; 100*$poj_teraz/$poj_produkcyjna" | bc -q)
		stan[9]=$(echo "scale=0; 100*$bateria_teraz/$bateria_full" | bc -q)
	else
		stan[10]=0
		stan[9]=0
	fi
fi
for i in $(seq 1 2); do
	for a in $(seq 1 $(($licznik-3))); do
		echo "$a:#${stan[$a]}"
	done

	echo "7:#${stan[7]} V"; echo "7:${stan[7]}" # V baterii
	echo "8:#${stan[8]} V"; echo "8:${stan[8]}" # V baterii
	echo "9:#${stan[9]} %      $bateria_teraz $jednostka"; echo "9:${stan[9]}" # % baterii
	echo "10:#${stan[10]} %        $bateria_full $jednostka"; echo "10:${stan[10]}" # % baterii

done | yad --center --on-top --multi-progress  --title=" $nazwa_skryptu" --bar="$(echo ${bar[1]})" --bar="$(echo ${bar[2]})" --bar="$(echo ${bar[3]})" --bar="$(echo ${bar[4]})" --bar="$(echo ${bar[5]})" --bar="$(echo ${bar[6]})" --bar="$(echo ${bar[7]})" --bar="$(echo ${bar[8]})" --bar="$(echo ${bar[9]})"  --bar="$(echo ${bar[10]})" --auto-kill --window-icon="/opt/NeteXt73/ikony/apm.png" --image="/opt/NeteXt73/ikony/apm.png" --text="$Stan_baterii:\n" --button="$TEXT_ZAMKNIJ:1"
}

ipv6_off(){
echo "sudo apt autoremove miredo -y && dpkg -l | awk '/^rc/{ print \$2}' | sudo xargs dpkg --purge"
echo "echo \"#disable ipv6\" | sudo tee -a /etc/sysctl.conf"
echo "echo \"net.ipv6.conf.all.disable_ipv6 = 1\" | sudo tee -a /etc/sysctl.conf"
echo "echo \"net.ipv6.conf.default.disable_ipv6 = 1\" | sudo tee -a /etc/sysctl.conf"
echo "echo \"net.ipv6.conf.lo.disable_ipv6 = 1\" | sudo tee -a /etc/sysctl.conf"
echo "sudo sysctl -p"
}

ipv6_on(){
echo "sudo apt install miredo -y"
echo "sudo sed -i '/#disable ipv6/d' /etc/sysctl.conf"
echo "sudo sed -i '/net.ipv6.conf.all.disable_ipv6 = 1/d' /etc/sysctl.conf"
echo "sudo sed -i '/net.ipv6.conf.default.disable_ipv6 = 1/d' /etc/sysctl.conf"
echo "sudo sed -i '/net.ipv6.conf.lo.disable_ipv6 = 1/d' /etc/sysctl.conf"
echo "sudo sysctl -p"
}

dymek(){
if [ "$USER" != "root" ];then
	if [ "$(which notify-send)" != "" ];then
		notify-send "$1" "$2" "$3" "$4"
	elif [ "$(which kdialog)" != "" ];then
		kdialog --title "$3" -passivepopup "$4"
	else
		yad --center --on-top --info --title="$3"  --window-icon="$2" --image="$2" --text="$4" --timeout=5 --geometry="$((300*$skala))x$((100*$skala))+15+30" --no-buttons --undecorated &
	fi
elif [ "$USER" = "root" ];then
	if [ -e ~/.netext73/notify_fix ] && [ "$(grep TRUE ~/.netext73/notify_fix)" != "" ];then
		yad --center --on-top --info --title="$3"  --window-icon="$2" --image="$2" --text="$4" --timeout=5 --geometry="$((300*$skala))x$((100*$skala))+15+30" --no-buttons --undecorated &
	else
		sudo -u $userek bash << EOF
		if [ "$(which notify-send)" != "" ];then
			notify-send "$1" "$2" "$3" "$4"
		elif [ "$(which kdialog)" != "" ];then
			kdialog --title "$3" -passivepopup "$4"
		else
			yad --center --on-top --info --title="$3"  --window-icon="$2" --image="$2" --text="$4" --timeout=5 --geometry="$((300*$skala))x$((100*$skala))+15+30" --no-buttons --undecorated &
		fi
EOF
	fi
fi
}

upstart_test(){
rm *.txt -f
sudo initctl list | grep -v -E "cryptdisks-udev|network-interface|network-interface-security|wait-for-state" > lista.txt
}


burntest(){
xterm -T "glxgears" -e bash -c "glxgears" &
for i in $(seq 1 $(grep 'model name' /proc/cpuinfo | wc -l )); do
xterm -T "BurnTest $i" -e bash -c "echo'';echo'';echo '███╗   ██╗███████╗████████╗███████╗██╗  ██╗████████╗███████╗██████╗ ';echo '████╗  ██║██╔════╝╚══██╔══╝██╔════╝╚██╗██╔╝╚══██╔══╝╚════██║╚════██╗';echo '██╔██╗ ██║█████╗     ██║   █████╗   ╚███╔╝    ██║       ██╔╝ █████╔╝';echo '██║╚██╗██║██╔══╝     ██║   ██╔══╝   ██╔██╗    ██║      ██╔╝  ╚═══██╗';echo '██║ ╚████║███████╗   ██║   ███████╗██╔╝ ██╗   ██║      ██║  ██████╔╝';echo '╚═╝  ╚═══╝╚══════╝   ╚═╝   ╚══════╝╚═╝  ╚═╝   ╚═╝      ╚═╝  ╚═════╝ ';echo'';echo'';echo '███╗   ██╗███████╗████████╗███████╗██╗  ██╗████████╗███████╗██████╗ ';echo '████╗  ██║██╔════╝╚══██╔══╝██╔════╝╚██╗██╔╝╚══██╔══╝╚════██║╚════██╗';echo '██╔██╗ ██║█████╗     ██║   █████╗   ╚███╔╝    ██║       ██╔╝ █████╔╝';echo '██║╚██╗██║██╔══╝     ██║   ██╔══╝   ██╔██╗    ██║      ██╔╝  ╚═══██╗';echo '██║ ╚████║███████╗   ██║   ███████╗██╔╝ ██╗   ██║      ██║  ██████╔╝';echo '╚═╝  ╚═══╝╚══════╝   ╚═╝   ╚══════╝╚═╝  ╚═╝   ╚═╝      ╚═╝  ╚═════╝ ';echo'';echo'';echo '███╗   ██╗███████╗████████╗███████╗██╗  ██╗████████╗███████╗██████╗ ';echo '████╗  ██║██╔════╝╚══██╔══╝██╔════╝╚██╗██╔╝╚══██╔══╝╚════██║╚════██╗';echo '██╔██╗ ██║█████╗     ██║   █████╗   ╚███╔╝    ██║       ██╔╝ █████╔╝';echo '██║╚██╗██║██╔══╝     ██║   ██╔══╝   ██╔██╗    ██║      ██╔╝  ╚═══██╗';echo '██║ ╚████║███████╗   ██║   ███████╗██╔╝ ██╗   ██║      ██║  ██████╔╝';echo '╚═╝  ╚═══╝╚══════╝   ╚═╝   ╚══════╝╚═╝  ╚═╝   ╚═╝      ╚═╝  ╚═════╝ ';python -c \"while True: pass\"" &
done
xterm -T "htop" -e bash -c "htop"
}

yad_wget(){

# NAME:         yad_wget
# VERSION:      0.2
# AUTHOR:       (c) 2014 Glutanimate
# DESCRIPTION:  graphical frontend to wget in form of a yad script
# FEATURES:     - display progress of multiple simultaneous downloads
#               - set maximum number of simultaneous downloads
# DEPENDENCIES: yad
#
#
# LICENSE:      GNU GPLv3 (http://www.gnu.de/documents/gpl-3.0.en.html)
#
# NOTICE:       THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.
#               EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES
#               PROVIDE THE PROGRAM “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR
#               IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
#               AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND
#               PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE,
#               YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.
#
#               IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY
#               COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS THE PROGRAM AS
#               PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL,
#               INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE
#               THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED
#               INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE
#               PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER
#               PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
#
# USAGE:        yad_wget <space-delimited URLs>
#               Closing the yad dialog will terminate all downloads in progress

# Variables and settings

MAXDLS="5" # set maximum number of simultaneous downloads

URILIST="$@" # gets list of URIs from stdin
USAGE="$0 <space-delimited URLs>"

# Usage checks

if [[ -z "$URILIST" ]];then
	echo "Error: No arguments provided"
	echo "Usage: $USAGE"
	exit 1
fi

download(){
if [ "$(echo $1 | grep premium)" != "" ]; then  #jeżeli konto premium to logujemy się na hasło
	wget --user=$US1 --password=$PASS1 "$1" 2>&1 | sed -u \
	"s/.* \([0-9]\+%\)\ \+\([0-9,.]\+.\) \(.*\)/$2:\1\n$2:#  \2\/s,  \3/"
	RET_WGET="${PIPESTATUS[0]}"             # get return code of wget
	if [[ "$RET_WGET" = 0 ]]                # check return code for errors
	then
		echo "$2:100%"
		echo "$2:#$TEXT_POBIERANIE_GOTOWE"
	else
		echo "$2:#$TEXT_BLAD_POBIERANIA"
	fi
	else
	wget  "$1" 2>&1 | sed -u \
	"s/.* \([0-9]\+%\)\ \+\([0-9,.]\+.\) \(.*\)/$2:\1\n$2:#  \2\/s,  \3/"
	RET_WGET="${PIPESTATUS[0]}"             # get return code of wget
	if [[ "$RET_WGET" = 0 ]]                # check return code for errors
	then
		echo "$2:100%"
		echo "$2:#$TEXT_POBIERANIE_GOTOWE"
	else
		echo "$2:#$TEXT_BLAD_POBIERANIA"
	fi
fi
}

# compose list of bars for yad
for URI in $URILIST; do                     # iterate through all URIs
	FILENAME="${URI##*/}"                   # extract last field of URI as filename
	YADBARS="$YADBARS --bar=$(echo $FILENAME | sed "s/1.txt/$TEXT_SUMY_KONTROLNE/"):NORM" # add filename to the list of URIs
done

IFS=" "
COUNTER="1"
DYNAMIC_COUNTER="1"

# main
# iterate through all URIs, download them in the background and
# pipe all output simultaneously to yad
# source: http://pastebin.com/yBL2wjaY

for URI in $URILIST; do
	if [[ "$DYNAMIC_COUNTER" = "$MAXDLS" ]] # only download n files at a time
	then
		 download "$URI" "$COUNTER"        # if limit reached wait until wget complete
		  DYNAMIC_COUNTER="1"               # before proceeding (by not sending download() to bg)
	else
		  download "$URI" "$COUNTER" &      # pass URI and URI number to download()
		  DYNAMIC_COUNTER="$[$DYNAMIC_COUNTER+1]"
	fi
	COUNTER="$[$COUNTER+1]"                 # increment counter
done | yad --center --on-top --multi-progress --auto-kill --auto-close --width=$((700*$skala)) $YADBARS --title "$nazwa_skryptu" \
--text "<b>$TEXT_POB2</b>" --window-icon="/opt/NeteXt73/ikony/download.png" --image="/opt/NeteXt73/ikony/download.png" --button="$TEXT_ZAMKNIJ:1"
# ↑ launch yad multi progress-bar window
}

procesor_monitor(){
barek="--bar="" --bar="$(free -m | awk '{print $1}' | head -n 1)" --bar="$(free -m | awk '{print $2}' | head -n 1)" --bar="$(free -m | awk '{print $3}' | head -n 1)" --bar="$(free -m | awk '{print $4}' | head -n 1)" --bar="$(free -m | awk '{print $5}' | head -n 1)" --bar="$(free -m | awk '{print $6}' | head -n 1)" --bar=swap --bar="""
for i in $(seq 1 $(grep 'model name' /proc/cpuinfo | wc -l )); do
	barek="$barek --bar=$(echo "core"$i"")"
done
petla_duza="tak"
cpu_max=$(( $(cat /sys/devices/system/cpu/cpu*/cpufreq/cpuinfo_max_freq | head -n 1) / 100000 ))
while [ "$petla_duza" = "tak" ]; do
	echo "2:$((100*$(free -m | sed -n 2p | awk '{print $2}')/$(free -m | sed -n 2p | awk '{print $2}')))"
	echo "3:$((100*$(free -m | sed -n 2p | awk '{print $3}')/$(free -m | sed -n 2p | awk '{print $2}')))"
	echo "4:$((100*$(free -m | sed -n 2p | awk '{print $4}')/$(free -m | sed -n 2p | awk '{print $2}')))"
	echo "5:$((100*$(free -m | sed -n 2p | awk '{print $5}')/$(free -m | sed -n 2p | awk '{print $2}')))"
	echo "6:$((100*$(free -m | sed -n 2p | awk '{print $6}')/$(free -m | sed -n 2p | awk '{print $2}')))"
	echo "7:$((100*$(free -m | sed -n 2p | awk '{print $7}')/$(free -m | sed -n 2p | awk '{print $2}')))"
	echo "1:#M E M O R Y"
	echo "2:#$(free -m | sed -n 2p | awk '{print $2}') MB"
	echo "3:#$(free -m | sed -n 2p | awk '{print $3}') MB"
	echo "4:#$(free -m | sed -n 2p | awk '{print $4}') MB"
	echo "5:#$(free -m | sed -n 2p | awk '{print $5}') MB"
	echo "6:#$(free -m | sed -n 2p | awk '{print $6}') MB"
	echo "7:#$(free -m | sed -n 2p | awk '{print $7}') MB"
	if [ "$(free -m | tail -n 1 | awk '{print $4}')" = "" ] || [ "$(free -m | tail -n 1 | awk '{print $4}')" = "0" ]; then
		echo "8:0"
		echo "8:#0 MB"
	else
		echo "8:$((100*$(free -m  |  tail -n 1 | awk '{print $3}')/$(free -m | tail -n 1 | awk '{print $2}')))"
		echo "8:#$(free -m |  tail -n 1 | awk '{print $3}') /  $(free -m | tail -n 1 | awk '{print $2}') MB"
	fi
	echo "9:#C P U      C O R E     F R E Q U E N C Y"
	sleep 1
	for i in $(seq 10 $(($(grep 'model name' /proc/cpuinfo | wc -l )+9))); do
		echo "$i:$(($(cat /proc/cpuinfo | grep MHz | cut -d ' ' -f 3 | sed -n $(($i-9))'p' | sed 's/\..*//' )/$cpu_max))" # * 6000MHZ/100
		echo "$i:#$(cat /proc/cpuinfo | grep MHz | cut -d ' ' -f 3 | sed -n $(($i-9))'p' | sed 's/\..*//' ) MHz"
	done
done | yad --title "$nazwa_skryptu" --center --multi-progress $barek --text="$(cat /proc/cpuinfo | grep 'model name' | head -n 1 | sed 's/.*: //')\n\n" --auto-kill --on-top --window-icon="/opt/NeteXt73/ikony/monitor.png" --image="/opt/NeteXt73/ikony/monitor.png" --width=$((460*$skala)) --button="$TEXT_ZAMKNIJ:1"
if [ "$?" != "" ]; then
	petla_duza="nie"
fi
}

hdd_stan(){
a=1
for i in $(echo $lista_dyskow); do
	for b in $(df -h | grep /dev/$i | awk '{print $1}' | sort);do
		barek="$barek --bar="" --bar=$(echo "$b")"
		dysk[$a]=$b
		a=$(( $a + 1 ))
	done
done
#exit
petla_duza="tak"

while [ "$petla_duza" = "tak" ]; do
	for i in $(seq 1 $(df -h | awk '{print $1}' | grep /dev/ | wc -l)); do
		echo "$(($i+$i-1)):#$(df -h | grep "${dysk[$i]}" | awk '{print $6}')"
		echo "$(($i*2)):$(df -h | grep "${dysk[$i]}" | awk '{print $5}')"
		echo "$(($i*2)):#$(df -h | grep "${dysk[$i]}" | awk '{print "used "$3" - "$5" / Size "$2}')"
	done
done | yad --title "$nazwa_skryptu" --image=drive-harddisk --center --multi-progress $barek --text="HDD monitor" --auto-kill --on-top --width=$((660*$skala)) --button="$TEXT_ZAMKNIJ:1"
if [ "$?" != "" ]; then
	petla_duza="nie"
fi
}

opusc_petle(){
	petla_duza="nie"
	rm *.txt -f *.sh
}

opusc_mala_petle(){
	petla="nie"
	rm *.txt -f *.sh
}

kill_yad(){
	kill -9 $(ps -aux | grep yad | grep $1 | awk '{print $2}' | head -n 1)
}

instaluj_gcc(){
export wersja_libgsl=$(ls -la  /usr/lib/x86_64-linux-gnu/ | grep libgsl.so | grep -e '-rw' | sed 's/.* //' | head -n 1)
if [ "$1" = "instaluj_nowy" ];then
	echo "sudo tar -Jxf /opt/NeteXt73-pakiety/pakiety/\$(ls /opt/NeteXt73-pakiety/pakiety | grep gcc) -C /opt/"
	echo "sudo tar -Jxf /opt/NeteXt73-pakiety/pakiety/\$(ls /opt/NeteXt73-pakiety/pakiety | grep binutils) -C /opt/"
	echo "sudo ln -sf /opt/binutils-\$(ls /opt/NeteXt73-pakiety/pakiety/ | grep binutils | cut -d "-" -f 2 | sed 's/.tar.xz//g')/bin/ld /usr/bin/ld "
	echo "sudo ln -sf /opt/binutils-\$(ls /opt/NeteXt73-pakiety/pakiety/ | grep binutils | cut -d "-" -f 2 | sed 's/.tar.xz//g')/bin/ld /usr/bin/ld-plugin"
	echo "sudo ln -sf /opt/binutils-\$(ls /opt/NeteXt73-pakiety/pakiety/ | grep binutils | cut -d "-" -f 2 | sed 's/.tar.xz//g')/bin/ld.bfd /usr/bin/ld.bfd"
	echo "sudo ln -sf /opt/gcc-\$(ls /opt/NeteXt73-pakiety/pakiety/ | grep gcc | cut -d "-" -f 2 | sed 's/.tar.xz//g')/bin/gcc /usr/bin/gcc"
	echo "sudo ln -sf /opt/gcc-\$(ls /opt/NeteXt73-pakiety/pakiety/ | grep gcc | cut -d "-" -f 2 | sed 's/.tar.xz//g')/bin/gcc-ar /usr/bin/gcc-ar"
	echo "sudo ln -sf /opt/gcc-\$(ls /opt/NeteXt73-pakiety/pakiety/ | grep gcc | cut -d "-" -f 2 | sed 's/.tar.xz//g')/bin/cpp /usr/bin/cpp"
	echo "sudo ln -sf /opt/gcc-\$(ls /opt/NeteXt73-pakiety/pakiety/ | grep gcc | cut -d "-" -f 2 | sed 's/.tar.xz//g')/bin/g++ /usr/bin/g++"
	echo "sudo ln -sf /opt/gcc-\$(ls /opt/NeteXt73-pakiety/pakiety/ | grep gcc | cut -d "-" -f 2 | sed 's/.tar.xz//g')/bin/c++ /usr/bin/c++"
	echo "if [ \"\$(lsb_release -cr | grep -E \"$wspierane_nr\")\" != \"\" ] || [ \"\$(echo $WERSJA_UBUNTU | grep -i -x -E \"\$wspierane_wersje\")\" != \"\" ]; then"
	echo "sudo rm -rf /usr/lib/libgsl.so.0"
	echo "sudo ln -sf /usr/lib/x86_64-linux-gnu/$wersja_libgsl /usr/lib/libgsl.so.0"
	echo "fi"
	echo "sudo ldconfig"
	echo "sudo rm -rf /usr/lib/x86_64-linux-gnu/libisl.so.10"
	echo "sudo ln -sf /usr/lib/x86_64-linux-gnu/libisl.so.13 /usr/lib/x86_64-linux-gnu/libisl.so.10"

elif [ "$1" = "zmien" ];then
	echo "sudo ln -sf /opt/gcc-\$wersja/bin/gcc /usr/bin/gcc"
	echo "sudo ln -sf /opt/gcc-\$wersja/bin/gcc-ar /usr/bin/gcc-ar"
	echo "sudo ln -sf /opt/gcc-\$wersja/bin/cpp /usr/bin/cpp"
	echo "sudo ln -sf /opt/gcc-\$wersja/bin/g++ /usr/bin/g++"
	echo "sudo ln -sf /opt/gcc-\$wersja/bin/c++ /usr/bin/c++"
	echo "if [ \"\$(lsb_release -cr | grep -E \"$wspierane_nr\")\" != \"\" ] || [ \"\$(echo $WERSJA_UBUNTU | grep -i -x -E \"\$wspierane_wersje\")\" != \"\" ]; then"
	echo "sudo rm -rf /usr/lib/libgsl.so.0"
	echo "sudo ln -sf /usr/lib/x86_64-linux-gnu/$wersja_libgsl /usr/lib/libgsl.so.0"
	echo "fi"
	echo "sudo ldconfig"
	echo "sudo rm -rf /usr/lib/x86_64-linux-gnu/libisl.so.10"
	echo "sudo ln -sf /usr/lib/x86_64-linux-gnu/libisl.so.13 /usr/lib/x86_64-linux-gnu/libisl.so.10"
elif [ "$1" = "zmien_stary" ];then
	echo "sudo ln -sf /usr/bin/gcc-\$wersja /usr/bin/gcc"
	echo "sudo ln -sf /usr/bin/gcc-ar-\$wersja /usr/bin/gcc-ar"
	echo "sudo ln -sf /usr/bin/cpp-\$wersja /usr/bin/cpp"
	echo "sudo ln -sf /usr/bin/g++-\$wersja /usr/bin/g++"
	echo "sudo rm -f /usr/bin/c++"
	echo "sudo ln -sf /usr/bin/g++ /usr/bin/c++"
fi
}

sumy(){
#pobranie sum kontrolnych
cd /tmp
#wydanie stable
wget https://www.kernel.org/ -O /tmp/netext73/sumy/stable.txt 2> /dev/null
stable="$(cat /tmp/netext73/sumy/stable.txt | grep tar.xz | head -n 1 | cut -d '-' -f 2 | sed 's/.tar.*//')"
wget https://www.kernel.org/pub/linux/kernel/v4.x/ChangeLog-$stable  -O /tmp/netext73/sumy/ChangeLog-$stable  2> /dev/null
#Sumy kontrolne
wget $adres_sum_kontrolnych --no-check-certificate 2> /dev/null
openssl enc -d -aes-256-cbc -in sumy_kontrolne.txt -pass pass:sumykontrolne -out $sumy_kontrolne
rm sumy_kontrolne.txt -f
if [ "$(cat $sumy_kontrolne)" = "" ]; then
	yad --center --info --title="$nazwa_skryptu  " --text="<span color=\"$kolor_textu\"><b>$BRAKNETA</b></span>" --window-icon="/opt/NeteXt73/ikony/error.png" --image="/opt/NeteXt73/ikony/error.png" --button="gtk-ok:0" --on-top
	exit 1
fi
}

#ostrzeżenie o konfliktach
zaleznosci(){
cd /tmp/netext73
plik=""
for i in $(echo tlp acpi-call laptop-mode-tools ulatelcy ulatencyd cpufrequtils);do
if [ "$(dpkg -l | awk '{print $2}' | grep $i -x)" != "" ];then
	export plik="$plik $i"
fi
done
if [ "$plik" != "" ]; then
	if yad --center --question --on-top --title="$nazwa_skryptu" --window-icon="/opt/NeteXt73/ikony/pytanie.png" --image="/opt/NeteXt73/ikony/pytanie.png" --button="$TEXT_TAK:0" --button="$TEXT_POWROT:1" --text="$TEXT_WARRING_DEP1\n$plik"; then
		naglowek > instaluj.sh
		echo "sudo apt purge $plik" >> instaluj.sh
		instalacja
	fi
fi

#naprawa Gtk-WARNING **: Theme file for default has no directories
if [ -e ~/.gtkrc-2.0 ] && [ "$(grep gtk-fallback-icon-theme="default" ~/.gtkrc-2.0)" != "" ]; then
	sed -i 's/gtk-fallback-icon-theme="default"/gtk-fallback-icon-theme="gnome"/' ~/.gtkrc-2.0
fi

#odpalanie strony domowej 
if [ ! -e ~/.netext73/strona_domowa ]; then
	yad --center --title="http://www.netext73.pl/p/netext73-poczatek.html" --window-icon="/opt/NeteXt73/ikony/NeteXt73.png" --html --uri="http://www.netext73.pl/p/netext73-poczatek.html" --width=$((950*$skala))  --height=$((600*$skala)) --browser
	echo "TRUE" > ~/.netext73/strona_domowa
fi
#życzenia świąteczne
DATA=$(date +"%m-%d")
if [ "$(echo $DATA | grep -o -E -x '12-2[4-6]')" != "" ]; then
	yad --center --info --title="$nazwa_skryptu   "  --text="\n\n\n\n\n\n\nZespół NeteXt'73 życzy\n<span color=\"$kolor_textu\"><b>Wesołych Świąt Bożego Narodzenia!</b></span>\n\n\nNeteXt'73 team\n<span color=\"$kolor_textu\"><b>wishes Merry Christmas!</b></span>" --window-icon="/opt/NeteXt73/ikony/tux_santa.png" --image="/opt/NeteXt73/ikony/tux_santa.png" --button="gtk-ok:0" --on-top
fi
#życzenia noworoczne
if [ "$DATA" = "12-31" ]; then
	yad --center --info --title="$nazwa_skryptu   "  --text="\n\n\n<span color=\"$kolor_textu\"><b>Happy New Year !!</b></span>\n\n\nNeteXt'73 team wishes Happy New Year $(( $(date +"%Y")+1 ))\n\nZespół NeteXt'73 życzy Szczęśliwego Nowego Roku $(( $(date +"%Y")+1 ))" --window-icon="/opt/NeteXt73/ikony/happyny.png" --image="/opt/NeteXt73/ikony/happyny.png" --button="gtk-ok:0" --on-top
fi
if [ "$DATA" = "01-01" ]; then
	yad --center --info --title="$nazwa_skryptu   "  --text="\n\n\n<span color=\"$kolor_textu\"><b>Happy New Year !!</b></span>\n\n\nNeteXt'73 team wishes Happy New Year $(( $(date +"%Y") ))\n\nZespół NeteXt'73 życzy Szczęśliwego Nowego Roku $(( $(date +"%Y") ))" --window-icon="/opt/NeteXt73/ikony/happyny.png" --image="/opt/NeteXt73/ikony/happyny.png" --button="gtk-ok:0" --on-top
fi

#sprawdzanie wersji systemu
if [ "$(echo $WERSJA_UBUNTU | grep -i -x -E "trusty|$wspierane_wersje")" = "" ] ; then
      dymek  -i $warning1 "$TEXT_INFORMACJA" "<b>NeteXt'73 - $TEXT_BRAK_KERNELA</b>"
fi
}

pastebinit_netext73(){
curl -0 -d title="$1" -d private=1 -d name=$(cat /tmp/netext73/userek) -d lang=bash -d expire=10080 --data-urlencode text@- $adres_logi
}

kill_process(){
petla="tak"
while [ $petla = "tak" ]; do
	process=$(ps -u $USER | yad --center --list --title="$nazwa_skryptu" --window-icon="process-stop" --image="process-stop" --column "$TEXT_SELECT_TO_KILL" --text="$TEXT_LISTA_PROCESOW $USER $TEXT_PROCESY" --width $((450*$skala)) --height $((450*$skala)) --button="gtk-ok:0" --button="$TEXT_ZAMKNIJ:1" --on-top )
	ans=$(echo $?)
	if test "$ans" -eq "0"; then
		select=$(echo $process | cut -d" " -f1)
		kill $select # 2> /dev/null
	fi

	if test "$ans" -eq "1"; then
		petla="nie"
	fi
done
}

proces_zablokowany(){
	#ostrzeżenie o aktywnym procesie instalacji
	yad --center --on-top --info --title="$TEXT_UWAGA"  --window-icon="$warning1" --image="$warning1" --text="$TEXT_UPDATE_ZAJETY" --timeout 5 --no-buttons
	#usuwanie plików tymczasowych poza sumami i nazwą usera
	find /tmp/netext73/* | grep -v -E "sumy|userek" | xargs rm -rf
	exit 1
}

NeteXt73_root(){
while ! yad --center --on-top --title="NeteXt'73 - Root-mode" --width=$((360*$skala)) --entry --hide-text --window-icon="/opt/NeteXt73/ikony/NeteXt73.png" --image="/opt/NeteXt73/ikony/key.png" --text="$TEXT_PASSWD1\n" --button="gtk-ok:0" | sudo -S $1; do
	if $(yad --center --question --title="$nazwa_skryptu1" --width=$((460*$skala)) --window-icon="/opt/NeteXt73/ikony/pytanie.png" --image="/opt/NeteXt73/ikony/pytanie.png" --button="$TEXT_TAK:0" --button="$TEXT_NIE:1" --text="$TEXT_PASSWD"); then
		rm -rf /tmp/netext73
		sudo -K
		exit 0
	fi
done
rm -rf /tmp/netext73
sudo -K
}


	
